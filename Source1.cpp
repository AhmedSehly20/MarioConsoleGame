#include <iostream>
#include<stdio.h>
#include<conio.h>
#include<windows.h>
using namespace std;
void catchheart(char x[][300], char key, int& heartflag1, int& heartflag2, int& posheartr, int& posheartc) {
	int r, c;
	for (int i = 0;i < 90;i++) {
		for (int k = 0;k < 300;k++) {
			if (x[i][k] == 1) {
				r = i;
				c = k;
			}
		}
	}
	posheartr = r + 6;
	posheartc = c + 3;
	if (x[r + 6][c + 3] == 3 && key == 's') {
		x[r + 6][c + 3] = ' ';
		heartflag1 = 1;
		heartflag2 = 1;
	}
	if (heartflag1 == 1 && key == 'l') {

		heartflag1 = 0;
		heartflag2 = 0;
	}

}
void change_direction(int& flag, int& submover, int& submovec)
{
	if (flag == 0) {
		submovec += 3;
		if (submovec > 280) {
			flag = 1;
		}
	}
	else
	{
		if (flag == 1) {
			submovec -= 3;
			if (submovec < 40) {
				flag = 0;
			}
		}
	}
}
void submarine(char x[][300], int r, int c)
{
	int i, j;



	for (j = c - 10; j < c + 10; j++) {

		x[r + 10][j] = '*';
	}
	for (j = r; j < r + 10; j++) {
		x[j][c - 10] = '*';
		x[j][c + 9] = '*';
	}
	for (j = r; j < r + 9; j++)
	{
		for (i = c - 1; i < c; i++)
		{
			x[j][i] = ' ';
		}
	}

}
void finallevel() {

	char youwin[19][106] = {
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':',':',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','*','%','%','*','*','%','%','*',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','%','%','!',':',' ',' ',' ',' ',':','!','%','%',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','*',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','!','$','!',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',':',':',':',':',':',':',' ',' ',':',' ',' ','!','#',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','%',' ',':',' ',' ',' ',' ',' ','!','%','*',':',' ',':','S','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','*',' ','%','%',':',':',' ',' ','*','*',':',':',' ',' ','%','!',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','Y','o','u',' ','l','o','s','t',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','!',':',':',':',':',' ',' ',' ',' ',' ',' ',' ',' ',':','%','&','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':',':','!',' ',' ',' ',' ',':','!',':',' ',' ',' ',' ','%','S','*','!',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','Y','o','u','r',' ','c','o','u','r','s','e','w','o','r','k',' ','i','s',' ','n','o','w',' ','0'},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','%','#','*',' ','!','S','*','S','&','@','@','&','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','%','*','*','#','S','&','$','@','#','*','*','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','R','e','t','u','r','n',' ','t','o',' ','p','r','o','g','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','!','*','*','*','*','*','*','*','*','*','*','*','*','#','!',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','&','*','*','*','*','*','*','*','*','*','*','%','%','*','*','!',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','!','!','%','*','%','&','*','*','*','*','*','*','*','%',' ','*',' ',':','$','@','*','!','!',':',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':',':','!','!','!','!',':','!','!','!','*','%','@','#','&','@','%','!',' ','!','*',' ','!','!','!','!',':',':','!','!','!','!','!',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','!','!','!',':',' ',' ',' ',' ',':','%',':','!','%','%','!',':',' ',' ',' ','!','*',':','*','!',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','!','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','*','!',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','*','*','*','*','%','%','!','!',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','!','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','!','*',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':',':',':','*',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},

	};
	char youlose[19][106] = {
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':',':',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','*','%','%','*','*','%','%','*',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','%','%','!',':',' ',' ',' ',' ',':','!','%','%',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','*',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','!','$','!',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',':',':',':',':',':',':',' ',' ',':',' ',' ','!','#',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','%',' ',':',' ',' ',' ',' ',' ','!','%','*',':',' ',':','S','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','*',' ','%','%',':',':',' ',' ','*','*',':',':',' ',' ','%','!',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','!',':',':',':',':',' ',' ',' ',' ',' ',' ',' ',' ',':','%','&','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':',':','!',' ',' ',' ',' ',':','!',':',' ',' ',' ',' ','%','S','*','!',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','y','o','u',' ','w','o','n',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','%','#','*',' ','!','S','*','S','&','@','@','&','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','%','*','*','#','S','&','$','@','#','*','*','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','!','*','*','*','*','*','*','*','*','*','*','*','*','#','!',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','Y','o','u','r',' ','c','o','u','r','s','e','w','o','r','k',' ','i','s',' ','n','o','w',' ','4','0'},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','&','*','*','*','*','*','*','*','*','*','*','%','%','*','*','!',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','!','!','%','*','%','&','*','*','*','*','*','*','*','%',' ','*',' ',':','$','@','*','!','!',':',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':',':','!','!','!','!',':','!','!','!','*','%','@','#','&','@','%','!',' ','!','*',' ','!','!','!','!',':',':','!','!','!','!','!',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','!','!','!',':',' ',' ',' ',' ',':','%',':','!','%','%','!',':',' ',' ',' ','!','*',':','*','!',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','!','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','*','!',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':','*','*','*','*','%','%','!','!',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','!','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','!','*',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',':',':',':','*',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},

	};
	int r, c;
	cout << "Do you wish to fight the boss?";
	cout << endl;
	cout << "Press y if you wish to fight or press n if you wish to live.";
	cout << endl;
	char choice;
	cin >> choice;

	if (choice == 'y') {
		for (r = 0; r < 19; r++) {
			for (c = 0; c < 106; c++) {
				cout << youwin[r][c];
			}
			cout << endl;
		}
	}
	if (choice == 'n') {
		for (r = 0; r < 19; r++) {
			for (c = 0; c < 106; c++) {
				cout << youlose[r][c];
			}
			cout << endl;
		}
	}

}
void winner() {
	char x[30][100] = {
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',219,219,' ',' ',' ',' ',219,' ',' ',' ',219,219,' ',' ',219,219,' ',' ',219,219,219,' ',' ',' ',' ',219,219,219,' ',' ',219,219,219,' ',' ',' ',' ',219,219,219,' ',' ',219,219,219,219,219,219,' ',' ',219,219,219,219,219,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',219,219,' ',' ',219,219,219,219,' ',' ',219,219,' ',' ',219,219,' ',' ',219,219,219,219,' ',' ',' ',219,219,219,' ',' ',219,219,219,219,' ',' ',' ',219,219,219,' ',' ',219,219,' ',' ',' ',' ',' ',' ',219,219,' ',' ',219,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',219,' ',' ',219,' ',' ',219,' ',' ',219,' ',' ',' ',219,219,' ',' ',219,219,' ',219,219,' ',' ',219,219,219,' ',' ',219,219,' ',219,219,' ',' ',219,219,219,' ',' ',219,219,219,219,219,219,' ',' ',219,219,' ',' ',219,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',219,219,219,' ',' ',' ',219,219,219,' ',' ',' ',219,219,' ',' ',219,219,' ',' ',219,219,219,219,219,219,' ',' ',219,219,' ',' ',219,219,219,219,219,219,' ',' ',219,219,' ',' ',' ',' ',' ',' ',219,219,219,219,219,219,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',219,219,219,' ',' ',' ',219,219,219,' ',' ',' ',219,219,' ',' ',219,219,' ',' ',' ',' ',' ',219,219,219,' ',' ',219,219,' ',' ',' ',' ',' ',219,219,219,' ',' ',219,219,219,219,219,219,' ',' ',219,219,' ',' ',' ',' ',219,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	};
	for (int r = 0; r < 30; r++) {
		for (int c = 0; c < 100; c++) {
			cout << x[r][c];
		}
		cout << endl;
	}
}
void loser() {
	char x[30][100] = {
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',219, 219, ' ', ' ', ' ', ' ', ' ', ' ', 219, 219, 219, 219, 219, 219, ' ', 219, 219, 219, 219, 219, 219, 219, ' ', ' ', 219, 219, 219, 219, 219, 219, ' ', ' ',219,219,219,219,219, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',219, 219, ' ', ' ', ' ', ' ', ' ', ' ', 219, ' ', ' ', ' ', ' ', 219, ' ', ' ', 219, 219, 219, ' ', ' ', ' ', ' ', ' ', 219, 219, ' ', ' ', ' ', ' ', ' ', ' ',219,219, ' ', ' ',219,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',219, 219, ' ', ' ', ' ', ' ', ' ', ' ', 219, ' ', ' ', ' ', ' ', 219, ' ', ' ', ' ', 219, 219, 219, 219, ' ', ' ', ' ', 219, 219, 219, 219, 219, 219, ' ', ' ',219,219,' ',' ',219,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',219, 219, ' ', ' ', ' ', ' ', ' ', ' ', 219, ' ', ' ', ' ', ' ', 219, ' ', ' ', ' ', ' ', ' ', 219, 219, 219, ' ', ' ', 219, 219, ' ', ' ', ' ', ' ', ' ', ' ',219,219,219,219,219,219,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',219, 219, 219, 219, 219, 219, ' ', ' ', 219, 219, 219, 219, 219, 219, ' ', ' ', 219, 219, 219, 219, 219, 219, ' ', ' ', 219, 219, 219, 219, 219, 219, ' ', ' ',219,219,' ',' ',' ',' ',219,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	};
	for (int r = 0; r < 30; r++) {
		for (int c = 0; c < 100; c++) {
			cout << x[r][c];
		}
		cout << endl;
	}
}
void set_spaces(char x[][300])
{
	for (int r = 0; r < 90; r++)
	{
		for (int c = 0; c < 300; c++)
		{
			x[r][c] = ' ';
		}
	}
}
void draw_map_level_1(char x[][300], int& heartflag1, int& heartflag2, int& posheartr, int& posheartc)
{
	int currentflag = 0;
	int r, c;
	set_spaces(x);
	for (r = 0; r < 90; r++)
	{
		x[r][1] = 219;
		x[r][2] = 219;
	}
	for (r = 4; r <= 27; r++) {
		x[r][2] = 219;
		x[r][3] = 219;
		x[r][96] = 219;
		x[r][95] = 219;
	}
	for (c = 4; c < 35; c++) {
		x[27][c] = 219;
	}
	for (c = 68; c < 96; c++) {
		x[27][c] = 219;
	}
	//floor
	if (heartflag1 == 0 && heartflag2 == 0) {
		x[26][20] = 3;
	}
	if (heartflag1 == 0 && heartflag2 == 1 && currentflag == 0) {

		x[posheartr][posheartc] = 3;
		currentflag += 5;


	}

	for (c = 3; c <= 200; c++) {
		x[47][c] = 219;
	}
	for (r = 20; r <= 39; r++) {
		for (c = 199; c <= 200; c++) {
			x[r][c] = 219;
		}
	}
	for (c = 40; c <= 47; c++) {
		x[c][199] = 219;
		x[c][200] = 219;
	}
	//
	for (c = 20; c <= 46; c++) {
		x[c][183] = 186;
		x[c][196] = 186;
	}
	for (c = 184; c < 196; c++) {
		for (r = 21; r <= 47; r += 3) {
			x[r][c] = 178;
		}
	}
	//water
	for (r = 58; r < 89; r++) {
		for (c = 31; c < 297; c++) {
			x[r][c] = 247;
		}
	}
	for (r = 20, c = 201; c < 256; r++, c += 2) {
		x[r][c] = 219;
	}
	for (r = 89; r >= 58; r--) {
		x[r][3] = 186;
		x[r][30] = 186;
	}
	for (c = 31; c < 300; c++) {
		x[89][c] = 94;
	}
}
void draw_map_level_2(char x[][300])
{
	int r, c;
	set_spaces(x);

	for (c = 4; c < 20; c++) {
		x[15][c] = 219;
	}

	for (c = 4; c < 20; c++) {
		x[c][27] = 186;
	}
	for (c = 30; c < 80; c++) {
		x[c][27] = 186;
	}
	for (c = 4; c < 27; c++) {
		x[4][c] = 205;
	}
	x[4][27] = 187;
	for (c = 45; c < 55; c++) {
		x[20][c] = 205;
	}
	//position of upper floor
	for (c = 15; c < 280; c++) {
		x[30][c] = 205;
	}

	//position of down floor
	for (c = 27; c < 290; c++) {
		x[80][c] = 205;
	}
	x[30][27] = 201;
	x[80][27] = 200;
	for (c = 30; c < 80; c++) {
		x[c][290] = 186;
	}
	x[30][290] = 187;
	x[80][290] = 188;
}
struct bullets
{
	int br, bc, f = 0;
	void set_positions(int r, int c)
	{
		br = r, bc = c;
	}
	void change_bullets_right()
	{
		if (f == 1)
		{
			bc -= 4;
		}
	}
	void change_bullets_left()
	{
		if (f == 1)
		{
			bc += 4;
		}
	}
	void draw_bullet_right(char x[][300])
	{
		if (f == 1)
		{
			x[br][bc] = 17;
		}
	}
	void draw_bullet_left(char x[][300])
	{
		if (f == 1)
		{
			x[br][bc] = 16;
		}
	}
	void hide_left_bullets(char x[][300])
	{
		if (x[br][bc + 1] != ' ' && x[br][bc + 1] != 16 && x[br][bc + 2] != ' ' && x[br][bc + 2] != 16)
		{
			f = 0;
		}
	}
	void hide_right_bullets(char x[][300])
	{
		if (x[br][bc - 1] != ' ' && x[br][bc - 1] != 17 && x[br][bc - 2] != ' ' && x[br][bc - 2] != 17)
		{
			f = 0;
			x[br][bc] = ' ';
		}
	}
	void draw_bullet_up(char x[][300])
	{
		if (f == 1)
		{
			x[br][bc] = 30;
			x[br][bc + 4] = 30;
		}
	}
	void change_bullets_up()
	{
		if (f == 1)
		{
			br -= 2;
		}
	}
	void hide_up_bullets(int r, int c)
	{
		if (r - br >= 6)
		{
			f = 0;
		}

	}
};
struct bomb
{
	int r, c, f = 0;
	void draw_bomb(char x[][300])
	{
		if (f == 1)
		{
			x[r][c] = 31;
		}
	}
	void set_positions_bombs(int br, int bc)
	{
		if (f == 0)
		{
			r = br + 2;
			c = bc + 7;
		}
	}
	void change_row()
	{
		if (f == 1)
		{
			r += 2;
		}
	}
	void hide_bomb(char x[][300])
	{
		if (x[r][c] != ' ' || x[r + 1][c] != ' ' || x[r + 2][c] != ' ' || x[r + 3][c] != ' ' || x[r + 4][c] != ' ')
		{
			f = 0;
		}
	}
};
struct laser {
	int lr, lc, f = 0, count = 9;
	void set_count()
	{
		if (f == 1 && count > 0)
		{
			count -= 3;
		}
		if (f == 0)
		{
			count = 9;
		}
	}
	void set_position_left_laser(int r, int c, int d)
	{
		if (d >= 1)
		{
			lr = r + 2;
			lc = c + 18;
		}
	}
	void set_position_right_laser(int r, int c, int d)
	{
		if (d >= 1)
		{
			lr = r + 2;
			lc = c - 3;
		}
	}
	void laser_fill_down(char x[][300]) {
		if (f == 1)
		{
			for (int i = 0; i < count; i++) {

				x[lr + i][lc] = 186;
			}
		}
	}
	void laser_fill_left(char x[][300]) {
		for (int i = 0; i < count; i++) {

			x[lr][lc - i] = 22;
		}
	}
	void laser_fill_right(char x[][300]) {
		for (int i = 0; i < count; i++) {
			x[lr][lc + i] = 22;
		}
	}
	void laser_fill_up(char x[][300]) {
		for (int i = 0; i < count; i++) {

			x[lr - i][lc] = 186;
		}
	}
};
struct elevator
{
	int err, ecc, fr = 0, fc = 0;
	void draw_elevator(char x[][300])
	{
		for (int r = err; r < err + 9; r++)
		{
			x[r][ecc] = 206;
			x[r][ecc + 10] = 206;
		}
		for (int c = ecc; c < ecc + 11; c++)
		{
			x[err][c] = 206;
			x[err + 9][c] = 206;
		}
	}
	void draw_elevator_1(char x[][300])
	{
		for (int c = ecc; c < ecc + 15; c++)
		{
			x[err][c] = 206;
		}
	}
	void change_flag()
	{
		if (err >= 70)
		{
			fr = 1;
		}
		if (err <= 21)
		{
			fr = 0;
		}
	}
	void change_flag_1()
	{
		if (ecc >= 266)
		{
			fc = 0;
		}
		if (ecc <= 33)
		{
			fc = 1;
		}
	}
	void move_elevator_row()
	{
		if (fr == 0)
		{
			err += 2;
		}
		if (fr == 1)
		{
			err -= 2;
		}
	}
	void move_elevator_column()
	{
		if (fc == 1)
		{
			ecc += 2;
		}
		if (fc == 0)
		{
			ecc -= 2;
		}
	}
};
struct hero
{
	int hc = 9, hr = 20, d = 3, l = 3, numberofbulletsofleftarm = 0, numberofbulletsofrightarm = 0, coursework = 0, ir = 50, il = 0, counts = 0, iu = 100;
	bullets bh[150];
	void draw_hero(char x[][300], int heartflag1, int heartflag2)
	{
		//FACE
		x[hr][hc] = 1;
		//NEhcK
		x[hr + 1][hc] = 219;
		//MIDDLE_hcHEST
		x[hr + 2][hc] = 219;
		//hrIGHT_hcHEST
		x[hr + 2][hc + 1] = 219;
		//LEFT_hcHEST
		x[hr + 2][hc - 1] = 219;
		//TOP_hrIGHT_GUN
		x[hr + 1][hc + 2] = 214;
		//TOP_LEFT_GUN	
		x[hr + 1][hc - 2] = 183;
		//hrIGT_AhrM
		x[hr + 2][hc + 2] = 206;
		//LEFT_AhrM
		x[hr + 2][hc - 2] = 206;
		//rIGT_HAND
		x[hr + 3][hc + 2] = 186;
		if (heartflag1 == 1) {
			x[hr + 3][hc + 3] = 3;
		}
		if (heartflag1 == 0) {
			x[hr + 3][hc + 3] = ' ';
		}
		//LEFT_HAND
		x[hr + 3][hc - 2] = 186;
		//TOhrSO
		x[hr + 3][hc] = 219;
		//LEFT_HIP
		x[hr + 4][hc - 1] = 219;
		//hrIGHT_HIP
		x[hr + 4][hc + 1] = 219;
		//PELVIS
		x[hr + 4][hc] = 223;
		//hrIGHT_THIGH
		x[hr + 5][hc + 1] = 186;
		//LEFT_THIGH
		x[hr + 5][hc - 1] = 186;
		//hrIGHT_FOOT
		x[hr + 6][hc + 1] = 200;
		//LEFT_FOOT
		x[hr + 6][hc - 1] = 200;
	}

	void check_level_2(int& level)
	{
		if (hc <= 30 && hc >= 3 && hr >= 75)
		{
			level++;
		}
	}
	void change_lives()
	{
		if (d <= 0)
		{
			l--;
			if (l != -1)
			{
				d = 3;
			}
		}
	}
	void draw_health_hero(char x[][300], int r, int c)
	{
		int i = 0;
		for (r += 1, c += 21; i < d * 2; i++, c++)
		{
			x[r][c] = 254;
		}
	}
	void draw_lives_hero(char x[][300], int r, int c)
	{
		int i = 0;
		for (r += 1, c += 7; i < l; i++, c += 2)
		{
			x[r][c] = 3;
		}
	}
	void count_kills(int r)
	{
		if (r <= 0)
		{
			coursework++;
		}
	}
	int  check_ladder()
	{
		int y = 0;
		if (hc >= 185 && hc <= 199 && hr <= 44 && hr >= 11)
		{
			y = 1;
		}
		return y;
	}
	int  check_ladder_2()
	{
		int y = 0;
		if (hc >= 179 && hc <= 192 && hr <= 44 && hr >= 11)
		{
			y = 1;
		}
		return y;
	}
	int  check_ladder_3()
	{
		int y = 0;
		if (hc >= 179 && hc <= 195 && hr <= 44 && hr >= 11)
		{
			y = 1;
		}
		return y;
	}
	int check_elevator_2(int r, int c)
	{
		if (hr - r >= 2 && hr - r <= 4 && hc - c >= -5 && hc - c <= 5)
		{
			return 1;
		}
		else
		{
			return 0;
		}
	}
	int check_elevator_3(int r, int c)
	{
		if (hr - r >= 2 && hr - r <= 4 && hc - c >= 2 && hc - c <= 7)
		{
			return 1;
		}
		else
		{
			return 0;
		}
	}
	void move_hero(char x[][300], char s, int& y, int r, int c)
	{
		y = check_ladder();
		int f = 0;
		int p = check_ladder_2();
		int p1 = check_ladder_3();
		int p2 = check_elevator_2(r, c);
		int p3 = check_elevator_3(r, c);
		if (s == 'd' || s == 'D')
		{
			for (int i = hr; i < hr + 7; i++)
			{
				if (x[i][hc + 4] != ' ')
				{
					f = 1;
					break;
				}
			}
			if (f == 0 || p == 1 || p2 == 1)
			{
				hc += 2;
			}
		}
		if (s == 'a' || s == 'A')
		{
			for (int i = hr; i < hr + 7; i++)
			{
				if (x[i][hc - 4] != ' ')
				{
					f = 1;
					break;
				}
			}
			if (f == 0 || p1 == 1 || p3 == 1)
			{
				hc -= 2;
			}
		}
		if (s == 'w' || s == 'W')
		{
			if (y == 1 && counts < 13)
			{
				hr -= 2;
				counts++;
			}
		}
		if (s == 's' || s == 'S')
		{
			if (counts > 0 && y == 1)
			{
				hr += 2;
				counts--;
			}
		}
		if (y == 0)
		{
			counts = 0;
		}
	}
	void jump(char x[][300])
	{
		if (x[hr - 1][hc] == ' ' && x[hr][hc] == ' ' && x[hr][hc + 1] == ' ' && x[hr][hc - 1] == ' ' && x[hr + 1][hc] == ' ' && x[hr + 1][hc + 1] == ' ' && x[hr + 1][hc - 1] == ' ' && x[hr + 1][hc + 4] == ' ' && x[hr + 1][hc - 2] == ' ' && x[hr + 2][hc + 2] == ' ' && x[hr + 2][hc - 2] == ' ' && x[hr + 2][hc] == ' ' && x[hr + 3][hc - 1] == ' ' && x[hr + 3][hc + 1] == ' ' && x[hr + 3][hc] == ' ' && x[hr + 4][hc + 1] == ' ' && x[hr + 4][hc - 1] == ' ' && x[hr + 5][hc + 1] == ' ' && x[hr + 4][hc - 1] == ' ')
		{
			hr--;
		}
		if (x[hr - 1][hc] == ' ' && x[hr][hc] == ' ' && x[hr][hc + 1] == ' ' && x[hr][hc - 1] == ' ' && x[hr + 1][hc] == ' ' && x[hr + 1][hc + 1] == ' ' && x[hr + 1][hc - 1] == ' ' && x[hr + 1][hc + 4] == ' ' && x[hr + 1][hc - 2] == ' ' && x[hr + 2][hc + 2] == ' ' && x[hr + 2][hc - 2] == ' ' && x[hr + 2][hc] == ' ' && x[hr + 3][hc - 1] == ' ' && x[hr + 3][hc + 1] == ' ' && x[hr + 3][hc] == ' ' && x[hr + 4][hc + 1] == ' ' && x[hr + 4][hc - 1] == ' ' && x[hr + 5][hc + 1] == ' ' && x[hr + 4][hc - 1] == ' ')
		{
			hr--;
		}
	}
	void gravity(char x[][300], int& kkl) {
		if (x[hr + 7][hc] == ' ' && x[hr + 7][hc - 1] == ' ' && x[hr + 7][hc + 1] == ' ') {
			hr++;
		}
		if (x[hr + 7][hc] == ' ' && x[hr + 7][hc - 1] == ' ' && x[hr + 7][hc + 1] == ' ') {
			hr++;
		}
		if (kkl != 0)
		{
			kkl--;
		}
	}
	void set_number_kills(char x[][300], int r, int c)
	{
		if (coursework < 10)
		{
			x[r + 1][c + 81] = coursework + 48;
		}
		if (coursework >= 10 && coursework < 100)
		{
			x[r + 1][c + 82] = (coursework % 10) + 48;
			x[r + 1][c + 81] = (coursework / 10) + 48;
		}
	}
	void set_course_work(char x[][300], int r, int c)
	{
		if ((coursework * 2) < 10)
		{
			x[r + 1][c + 97] = (coursework * 2) + 48;
		}
		if ((coursework * 2) >= 10 && (coursework * 2) < 100)
		{
			x[r + 1][c + 98] = ((coursework * 2) % 10) + 48;
			x[r + 1][c + 97] = (((coursework * 2) / 10) % 10) + 48;
		}
	}
	void set_terminal(int& r, int& c)
	{
		if (hr <= 15)
		{
			r = 0;
		}
		else
		{
			if (hr >= 64)
			{
				r = 59;
			}
			else
			{
				r = hr - 15;
			}
		}
		if (hc <= 49)
		{
			c = 0;
		}
		else
		{
			if (hc >= 249)
			{
				c = 199;
			}
			else
			{
				c = hc - 49;
			}
		}

	}
	void lives()
	{
		if (d == 0)
		{
			l--;
			if (l != -1)
			{
				d = 3;
			}
		}
	}
	void set_bullets_hero(char x[][300], int r, int c, char s)
	{
		if (s == 'r' || s == 'R')
		{
			numberofbulletsofleftarm = 0;
		}
		if (s == 't' || s == 'T')
		{
			numberofbulletsofrightarm = 0;
		}
		x[r + 1][c + 49] = (8 - numberofbulletsofleftarm) + 48;
		x[r + 1][c + 72] = (8 - numberofbulletsofrightarm) + 48;
	}
	void fire(char x[][300], char s)
	{
		if (il >= 50)
		{
			il = 0;
		}
		if (ir >= 100)
		{
			ir = 50;
		}
		if (iu >= 150)
		{
			iu = 100;
		}
		if (s == 'e' || s == 'E')
		{
			if (numberofbulletsofleftarm < 8)
			{
				bh[il].f = 1;
				il++;
				numberofbulletsofleftarm++;
			}
		}
		if (s == 'q' || s == 'Q')
		{
			if (numberofbulletsofrightarm < 8)
			{
				bh[ir].f = 1;
				ir++;
				numberofbulletsofrightarm++;
			}
		}
		if (s == 'c' || s == 'C')
		{
			bh[iu].f = 1;
			iu++;
		}
		for (int i = 0; i <= il; i++)
		{
			bh[i].draw_bullet_left(x);
			bh[i].hide_left_bullets(x);
			bh[i].change_bullets_left();
		}
		for (int i = 50; i <= ir; i++)
		{
			bh[i].draw_bullet_right(x);
			bh[i].hide_right_bullets(x);
			bh[i].change_bullets_right();
		}
		for (int i = 100; i <= iu; i++)
		{
			bh[i].draw_bullet_up(x);
			bh[i].hide_up_bullets(hr, hc);
			bh[i].change_bullets_up();
		}
	}
	void damage_hero(char x[][300], int r, int c, int& fff)
	{
		for (int i = 0; i < 7; i++)
		{
			if (hr + i == r && c == hc - 1)
			{
				d--;
				fff = 0;
				x[r][c] = ' ';
				break;
			}
			if (hr + i == r && c == hc - 2)
			{
				d--;
				fff = 0;
				x[r][c] = ' ';
				break;
			}
			if (hr + i == r && c == hc + 2)
			{
				d--;
				fff = 0;
				x[r][c] = ' ';
				break;
			}
			if (hr + i == r && c == hc + 1)
			{
				d--;
				fff = 0;
				x[r][c] = ' ';
				break;
			}
		}
	}
	void damage_hero_2(char x[][300])
	{
		int fffff = 0;
		for (int rr = hr; rr < hr + 7; rr++)
		{
			for (int cc = hc - 2; cc <= hc + 2; cc++)
			{
				if (x[rr][cc] == 31)
				{
					fffff = 1;
					d--;
					break;
				}
			}
			if (fffff == 1)
			{
				break;
			}
		}
	}
	void damage_hero_3(int r, int c)
	{
		if (hr - r <= 9 && hr - r >= 1 && hc - c >= -2 && hc - c <= 4)
		{
			d -= 2;
		}
	}
	int check_elevator_1(int r, int c)
	{
		if (hr - r >= 0 && hr - r <= 6 && hc - c >= 1 && hc - c <= 7)
		{
			return 1;
		}
		else
		{
			return 0;
		}
	}
	int check_elevator_4(int r, int c)
	{
		if (hr - r == -7 && hc - c >= -2 && hc - c <= 10)
		{
			return 1;
		}
		else
		{
			return 0;
		}
	}
	void move_with_elevator_rows(int f1, int r, int c)
	{
		int f = check_elevator_1(r, c);
		if (f == 1 && f1 == 0)
		{
			hr += 2;
		}
		if (f == 1 && f1 == 1)
		{
			hr -= 2;
		}
	}
	void move_with_elevator_columns(int f1, int r, int c)
	{
		int f = check_elevator_4(r, c);
		if (f == 1 && f1 == 1)
		{
			hc += 2;
		}
		if (f == 1 && f1 == 0)
		{
			hc -= 2;
		}
	}
};
struct enemy
{
	int er, ec, d = 2, countbullets1 = 0, countbullets2 = 8;
	bullets be[16];
	void draw_enemy(char e[][300])
	{
		e[er][ec] = 254;
		e[er][ec + 1] = 190;
		e[er][ec - 1] = 212;
		e[er + 1][ec] = 219;
		e[er + 1][ec + 1] = 201;
		e[er + 1][ec - 1] = 183;
		e[er + 2][ec] = 219;
		e[er + 2][ec + 1] = 219;
		e[er + 2][ec - 1] = 219;
		e[er + 2][ec + 2] = 187;
		e[er + 2][ec - 2] = 201;
		e[er + 3][ec + 2] = 186;
		e[er + 3][ec - 2] = 186;
		e[er + 3][ec] = 219;
		e[er + 4][ec - 1] = 219;
		e[er + 4][ec + 1] = 219;
		e[er + 4][ec] = 223;
		e[er + 5][ec + 1] = 219;
		e[er + 5][ec - 1] = 219;
		e[er + 6][ec + 1] = 200;
		e[er + 6][ec - 1] = 200;
	}
	void draw_health_enemy(char x[][300])
	{
		for (int i = 0, c = ec - 2; i < d * 3; i++, c++)
		{
			x[er - 1][c] = 254;
		}
	}
	void change_damage()
	{
		if (d <= 0)
		{
			d = 1000;
		}
	}
	void reset_count_bullets()
	{
		if (countbullets1 == 8)
		{
			countbullets1 = 0;
		}
		if (countbullets2 == 17)
		{
			countbullets2 = 8;
		}
	}
	void enemy_shoot(int r, int c)
	{
		if (r - er <= 1 && r - er >= -5 && c - ec <= 90 && c - ec >= 0)
		{
			be[countbullets1].f = 1;
			countbullets1++;
		}
		if (r - er >= -5 && r - er <= 1 && ec - c <= 90 && ec - c >= 0)
		{
			be[countbullets2].f = 1;
			countbullets2++;
		}
	}
	void damage_enemy(char x[][300], int r, int c, int& fff)
	{
		for (int i = 0; i < 7; i++)
		{
			if (er + i == r && c - ec >= -4 && c - ec <= 0)
			{
				d--;
				x[r][c] = ' ';
				fff = 0;
				break;
			}
			if (er + i == r && c - ec >= 0 && c - ec <= 4)
			{
				d--;
				x[r][c] = ' ';
				fff = 0;
				break;
			}
		}
	}
};
struct boss
{
	int br = 71, bc = 40, d = 5, countbombs = 0;
	bomb bb[15];
	laser ll[2];
	void draw_health_boss(char x[][300])
	{
		for (int i = 0, c = bc - 2; i < d + 10; i++, c++)
		{
			x[br - 4][c] = 254;
		}
	}
	void draw_boss(char b[][300])
	{
		if (d >= 1)
		{
			for (int ii = 0; ii < 16; ii++)
			{
				b[br][bc + ii] = 219;
				b[br - 1][bc + ii] = 254;
				if (ii == 1 || ii == 14)
				{
					b[br - 1][bc + ii] = 219;
				}
			}
			b[br][bc - 1] = 223;
			b[br][bc + 16] = 223;
			b[br][bc - 2] = 254;
			b[br][bc + 17] = 254;
			b[br - 2][bc + 2] = 220;
			for (int ii = 3; ii < 13; ii++)
			{
				b[br - 2][bc + ii] = 254;
			}
			b[br - 2][bc + 13] = 220;
			b[br - 1][bc] = 240;
			b[br - 1][bc - 1] = 212;
			b[br - 1][bc + 15] = 240;
			b[br - 1][bc + 16] = 189;
			b[br + 1][bc + 7] = 223;///
			b[br + 1][bc + 6] = 201;
			b[br + 1][bc + 8] = 187;
			b[br][bc + 18] = 219;
			b[br][bc - 3] = 219;
			b[br + 1][bc + 18] = 208;//
			b[br + 1][bc - 3] = 208;//
			b[br - 1][bc + 18] = 203;
			b[br - 1][bc - 3] = 203;
			draw_health_boss(b);
		}
	}
	void boss_shoot(int r, int c)
	{
		if (countbombs >= 15)
		{
			countbombs = 0;
		}
		bb[countbombs].f = 1;
		countbombs++;
	}
	void boss_set_laser(int r, int c)
	{
		if (r - br <= 10 && r - br >= 1 && c - bc <= 20 && c - bc >= -2)
		{
			ll[0].f = 1;
			ll[1].f = 1;
		}
		else
		{
			ll[0].f = 0;
			ll[1].f = 0;
			ll[0].count = 0;
			ll[1].count = 0;
		}
	}
	void delete_boss(char x[][300]) {
		int r, c;
		for (r = 10; r < 25; r++) {
			for (c = 4; c < 297; c++) {
				x[r][c] = ' ';
			}
		}
	}
	void change_direction(int& flag)
	{
		if (flag == 0) {
			bc += 3;
			if (bc > 280) {
				flag = 1;
			}
		}
		else
		{
			if (flag == 1) {
				bc -= 3;
				if (bc < 40) {
					flag = 0;
				}
			}
		}
	}
	void damage_boss(char x[][300], int r, int c, int& fff)
	{
		if (r >= br && c >= bc - 1 && c <= bc + 6)
		{
			fff = 0;
			d -= 2;
		}
	}
};
void draw_frame(char x[][300], int sr, int sc)
{
	for (int r = sr; r < sr + 4; r++)
	{
		for (int c = sc; c < sc + 100; c++)
		{
			x[r][c] = ' ';
		}
	}
	for (int c = sc + 1; c < sc + 100; c++)
	{
		x[sr][c] = 196;
		x[sr + 29][c] = 196;
		x[sr + 2][c] = 196;
	}
	for (int r = sr + 1; r < sr + 29; r++)
	{
		x[r][sc] = 179;
		x[r][sc + 99] = 179;
	}
	x[sr + 2][sc + 0] = 195;
	x[sr + 2][sc + 99] = 180;
	x[sr + 0][sc + 0] = 218;
	x[sr + 0][sc + 99] = 191;
	x[sr + 29][sc + 0] = 192;
	x[sr + 29][sc + 99] = 217;
	x[sr + 1][sc + 13] = 179;
	x[sr][sc + 13] = 194;
	x[sr + 2][sc + 13] = 193;
	x[sr + 1][sc + 28] = 179;
	x[sr][sc + 28] = 194;
	x[sr + 2][sc + 28] = 193;
	x[sr + 1][sc + 50] = 179;
	x[sr][sc + 50] = 194;
	x[sr + 2][sc + 50] = 193;
	x[sr + 1][sc + 73] = 179;
	x[sr][sc + 73] = 194;
	x[sr + 2][sc + 73] = 193;
	x[sr + 1][sc + 84] = 179;
	x[sr][sc + 84] = 194;
	x[sr + 2][sc + 84] = 193;
	x[sr + 1][sc + 1] = 'L', x[sr + 1][sc + 2] = 'i', x[sr + 1][sc + 3] = 'v', x[sr + 1][sc + 4] = 'e', x[sr + 1][sc + 5] = 's';
	x[sr + 1][sc + 14] = 'H', x[sr + 1][sc + 15] = 'e', x[sr + 1][sc + 16] = 'a', x[sr + 1][sc + 17] = 'l', x[sr + 1][sc + 18] = 't';
	x[sr + 1][sc + 29] = 'B', x[sr + 1][sc + 30] = 'u', x[sr + 1][sc + 31] = 'l', x[sr + 1][sc + 32] = 'l', x[sr + 1][sc + 33] = 'e', x[sr + 1][sc + 34] = 't', x[sr + 1][sc + 35] = 's', x[sr + 1][sc + 37] = 'o', x[sr + 1][sc + 38] = 'f', x[sr + 1][sc + 40] = 'l', x[sr + 1][sc + 41] = 'e', x[sr + 1][sc + 42] = 'f', x[sr + 1][sc + 43] = 't', x[sr + 1][sc + 45] = 'a', x[sr + 1][sc + 46] = 'r', x[sr + 1][sc + 47] = 'm';
	x[sr + 1][sc + 51] = 'B', x[sr + 1][sc + 52] = 'u', x[sr + 1][sc + 53] = 'l', x[sr + 1][sc + 54] = 'l', x[sr + 1][sc + 55] = 'e', x[sr + 1][sc + 56] = 't', x[sr + 1][sc + 57] = 's', x[sr + 1][sc + 59] = 'o', x[sr + 1][sc + 60] = 'f', x[sr + 1][sc + 62] = 'r', x[sr + 1][sc + 63] = 'i', x[sr + 1][sc + 64] = 'g', x[sr + 1][sc + 65] = 'h', x[sr + 1][sc + 66] = 't', x[sr + 1][sc + 68] = 'a', x[sr + 1][sc + 69] = 'r', x[sr + 1][sc + 70] = 'm';
	x[sr + 1][sc + 74] = 'K', x[sr + 1][sc + 75] = 'i', x[sr + 1][sc + 76] = 'l', x[sr + 1][sc + 77] = 'l', x[sr + 1][sc + 78] = 's';
	x[sr + 1][sc + 85] = 'C', x[sr + 1][sc + 86] = 'o', x[sr + 1][sc + 87] = 'u', x[sr + 1][sc + 88] = 'r', x[sr + 1][sc + 89] = 's', x[sr + 1][sc + 90] = 'e', x[sr + 1][sc + 92] = 'W', x[sr + 1][sc + 93] = 'o', x[sr + 1][sc + 94] = 'r', x[sr + 1][sc + 95] = 'k';
}
void display_screen_screen_screen(char x[][300], int sr, int sc)
{
	for (int r = sr; r < sr + 30; r++)
	{
		for (int c = sc; c < sc + 100; c++)
		{
			cout << x[r][c];
		}
	}

	system("cls");
}
void herodeath(char x[][300], int hr, int hc, int deathheroposrow, int deathheroposcol) {
	//FACE
	x[deathheroposrow][deathheroposcol] = 1;
	//NEdeathheroposcolK
	x[deathheroposrow + 1][deathheroposcol] = 219;
	//MIDDLE_deathheroposcolHEST
	x[deathheroposrow + 2][deathheroposcol] = 219;
	//deathheroposrowIGHT_deathheroposcolHEST
	x[deathheroposrow + 2][deathheroposcol + 1] = 219;
	//LEFT_deathheroposcolHEST
	x[deathheroposrow + 2][deathheroposcol - 1] = 219;
	//TOP_RIGHT_GUN
	x[deathheroposrow + 1][deathheroposcol + 2] = 214;
	//TOP_LEFT_GUN	
	x[deathheroposrow + 1][deathheroposcol - 2] = 183;
	//deathheroposrowIGT_AdeathheroposrowM
	x[deathheroposrow + 2][deathheroposcol + 2] = 206;
	//LEFT_AdeathheroposrowM
	x[deathheroposrow + 2][deathheroposcol - 2] = 206;
	//deathheroposrowIGT_HAND
	x[deathheroposrow + 3][deathheroposcol + 2] = 186;
	//LEFT_HAND
	x[deathheroposrow + 3][deathheroposcol - 2] = 186;
	//TOdeathheroposrowSO
	x[deathheroposrow + 3][deathheroposcol] = 219;
	//LEFT_HIP
	x[deathheroposrow + 4][deathheroposcol - 1] = 219;
	//deathheroposrowIGHT_HIP
	x[deathheroposrow + 4][deathheroposcol + 1] = 219;
	//PELVIS
	x[deathheroposrow + 4][deathheroposcol] = 223;
	//deathheroposrowIGHT_THIGH
	x[deathheroposrow + 5][deathheroposcol + 1] = 186;
	//LEFT_THIGH
	x[deathheroposrow + 5][deathheroposcol - 1] = 186;
	//deathheroposrowIGHT_FOOT
	x[deathheroposrow + 6][deathheroposcol + 1] = 200;
	//LEFT_FOOT
	x[deathheroposrow + 6][deathheroposcol - 1] = 200;


	display_screen_screen_screen(x, hr, hc);

	//HEAD
	x[deathheroposrow][deathheroposcol] = ' ';
	x[deathheroposrow + 1][deathheroposcol + 1] = 1;
	display_screen_screen_screen(x, hr, hc);

	//HEAD
	x[deathheroposrow + 1][deathheroposcol + 1] = ' ';
	x[deathheroposrow + 2][deathheroposcol + 3] = 1;
	//TOP_deathheroposrowIGHT_GUN
	x[deathheroposrow + 1][deathheroposcol + 2] = ' ';
	//TOP_LEFT_GUN	
	x[deathheroposrow + 1][deathheroposcol - 2] = ' ';
	//TOP_deathheroposrowIGHT_GUN
	x[deathheroposrow + 3][deathheroposcol + 3] = 214;
	//TOP_LEFT_GUN	
	x[deathheroposrow + 3][deathheroposcol - 3] = 183;
	//NECK
	x[deathheroposrow + 1][deathheroposcol] = ' ';
	display_screen_screen_screen(x, hr, hc);

	x[deathheroposrow + 2][deathheroposcol + 3] = ' ';
	x[deathheroposrow + 3][deathheroposcol + 5] = 1;
	//TOP_deathheroposrowIGHT_GUN
	x[deathheroposrow + 3][deathheroposcol + 3] = ' ';
	//TOP_LEFT_GUN	
	x[deathheroposrow + 3][deathheroposcol - 3] = ' ';
	//TOP_deathheroposrowIGHT_GUN
	x[deathheroposrow + 5][deathheroposcol + 3] = 214;
	//TOP_LEFT_GUN	
	x[deathheroposrow + 5][deathheroposcol - 3] = 183;
	display_screen_screen_screen(x, hr, hc);

	x[deathheroposrow + 3][deathheroposcol + 5] = ' ';
	x[deathheroposrow + 6][deathheroposcol + 5] = 1;
	display_screen_screen_screen(x, hr, hc);

	x[deathheroposrow + 1][deathheroposcol] = 147;
	display_screen_screen_screen(x, hr, hc);

	//angel head and neck
	x[deathheroposrow][deathheroposcol] = 147;
	x[deathheroposrow + 1][deathheroposcol] = 12;
	//wing
	x[deathheroposrow + 1][deathheroposcol + 1] = 148;
	x[deathheroposrow + 1][deathheroposcol - 1] = 148;
	display_screen_screen_screen(x, hr, hc);

	//angel head and neck
	x[deathheroposrow - 1][deathheroposcol] = 147;
	x[deathheroposrow][deathheroposcol] = 12;

	//wing
	x[deathheroposrow][deathheroposcol + 1] = 148;
	x[deathheroposrow][deathheroposcol - 1] = 148;
	x[deathheroposrow + 1][deathheroposcol + 1] = ' ';
	x[deathheroposrow + 1][deathheroposcol - 1] = ' ';
	//tail
	x[deathheroposrow + 1][deathheroposcol] = 31;
	display_screen_screen_screen(x, hr, hc);

	int lefjesl;
	for (lefjesl = deathheroposrow; lefjesl > deathheroposrow - 12; lefjesl--) {
		//angel head and neck
		x[lefjesl - 1][deathheroposcol] = 147;
		x[lefjesl][deathheroposcol] = 12;

		//wing
		x[lefjesl][deathheroposcol + 1] = 148;
		x[lefjesl][deathheroposcol - 1] = 148;
		x[lefjesl + 1][deathheroposcol + 1] = ' ';
		x[lefjesl + 1][deathheroposcol - 1] = ' ';
		//tail
		x[lefjesl + 1][deathheroposcol] = 31;
		if (deathheroposrow != lefjesl) {


			x[lefjesl + 2][deathheroposcol] = ' ';
		}
		display_screen_screen_screen(x, hr, hc);
	}
	//head
	x[lefjesl][deathheroposcol] = ' ';
	//body
	x[lefjesl + 1][deathheroposcol - 1] = ' ';
	//wing
	x[lefjesl + 1][deathheroposcol] = ' ';
	x[lefjesl + 1][deathheroposcol + 1] = ' ';
	//tail
	x[lefjesl + 2][deathheroposcol] = ' ';
	display_screen_screen_screen(x, hr, hc);
	Sleep(5000);

}
void main()
{
	int ytflag = 0;
	int submover = 58, submovec = 280;
	int deathheroposrow;
	int deathheroposcol;
	int r = 0, c = 0, l = 0, f = 0, k = 0, kkl = 0, i, ff = 0, y = 0, m = 0, f7 = 0, ll = 0, flag = 0;
	char x[90][300], s = '%';
	hero h;
	boss b;
	int heartflag2 = 0, heartflag1 = 0;
	int poseheartr = 0, poseheartc = 0;
	int catchposeheartr = 0, catchposeheartc = 0;
	enemy e[2];
	elevator vv;
	while (1)
	{

		if (l == 0)
		{
			if (ff == 0)
			{
				e[0].er = 20, e[0].ec = 85;
				e[1].er = 40, e[1].ec = 15;
				vv.err = 55, vv.ecc = 260;
				ff = 1;
			}
			while (!_kbhit())
			{
				h.set_terminal(r, c);
				h.set_bullets_hero(x, r, c, s);
				draw_map_level_1(x, heartflag1, heartflag2, catchposeheartr, catchposeheartc);
				if (m % 25 == 24 || f7 == 1)
				{
					vv.move_elevator_column();
					h.move_with_elevator_columns(vv.fc, vv.err, vv.ecc);
					f7 = 1;
					if (vv.ecc >= 266 || vv.ecc <= 33)
					{
						m = 0;
						f7 = 0;
					}
					vv.change_flag_1();
				}
				vv.draw_elevator_1(x);
				for (i = 0; i < 2; i++)
				{

					if (e[i].d > 0 && e[i].d <= 2)
					{
						for (int o = 0; o < 100; o++)
						{
							if (h.bh[o].f == 1)
							{
								e[i].damage_enemy(x, h.bh[o].br, h.bh[o].bc, h.bh[o].f);
							}
						}
						for (int o = 0; o < 16; o++)
						{
							if (h.bh[o].f == 1)
							{
								e[i].damage_enemy(x, h.bh[o].br, h.bh[o].bc, h.bh[o].f);
							}
							if (e[i].be[o].f == 0 & o >= 8)
							{
								e[i].be[o].set_positions(e[i].er + 1, e[i].ec - 2);
							}
							if (e[i].be[o].f == 0 && o < 8)
							{
								e[i].be[o].set_positions(e[i].er + 1, e[i].ec + 2);
							}
						}
						e[i].draw_health_enemy(x);
						e[i].draw_enemy(x);
						for (int o = 0; o < 8; o++)
						{
							e[i].be[o].draw_bullet_left(x);
							h.damage_hero(x, e[i].be[o].br, e[i].be[o].bc, e[i].be[o].f);
							e[i].be[o].hide_left_bullets(x);
							e[i].be[o].change_bullets_left();
						}
						for (int o = 8; o < 16; o++)
						{
							e[i].be[o].draw_bullet_right(x);
							h.damage_hero(x, e[i].be[o].br, e[i].be[o].bc, e[i].be[o].f);
							e[i].be[o].hide_right_bullets(x);
							e[i].be[o].change_bullets_right();
						}
						if (m % 20 == 1)
						{
							e[i].enemy_shoot(h.hr, h.hc);
						}
						e[i].reset_count_bullets();
					}
					h.count_kills(e[i].d);
					e[i].change_damage();
				}
				h.move_hero(x, s, y, vv.err, vv.ecc);
				for (int o = 0; o < 150; o++)
				{
					/*if (o < 2)
					{
						b.ll[o].set_count();
						b.ll[o].laser_fill_down(x);
					}
					/*if (o < 15)
					{
						b.bb[o].set_positions_bombs(b.br, b.bc);
						b.bb[o].hide_bomb(x);
						b.bb[o].draw_bomb(x);
						b.bb[o].change_row();

					}*/
					if (o < 50)
					{
						if (h.bh[o].f == 0)
						{
							h.bh[o].set_positions(h.hr + 2, h.hc + 2);
						}
					}
					if (o >= 50 && o < 100)
					{
						if (h.bh[o].f == 0)
						{
							h.bh[o].set_positions(h.hr + 2, h.hc - 2);
						}
					}
					if (o >= 100)
					{
						if (h.bh[o].f == 0)
						{
							h.bh[o].set_positions(h.hr + 1, h.hc - 2);
						}
					}
				}
				h.fire(x, s);
				if (f == 1)
				{
					k++;
					h.jump(x);
					if (k == 4)
					{
						f = 0;
						k = 0;
					}
				}
				if (f == 0 && y == 0) {
					h.gravity(x, kkl);
				}
				h.draw_hero(x, heartflag1, heartflag2);
				for (i = 0; i < 2; i++)
				{

					if (e[i].d > 0 && e[i].d <= 2)
					{
						for (int o = 0; o < 150; o++)
						{
							if (h.bh[o].f == 1 && o < 100)
							{
								e[i].damage_enemy(x, h.bh[o].br, h.bh[o].bc, h.bh[o].f);
							}
							if (h.bh[o].f > 0 && o > 100)
							{
								b.damage_boss(x, h.bh[o].br, h.bh[o].bc, h.bh[o].f);
							}
						}
						if (m % 20 == 1)
						{
							e[i].enemy_shoot(h.hr, h.hc);
						}
						e[i].reset_count_bullets();
					}
					h.count_kills(e[i].d);
					e[i].change_damage();
				}
				h.damage_hero_2(x);
				h.change_lives();
				draw_frame(x, r, c);
				h.draw_health_hero(x, r, c);
				h.set_number_kills(x, r, c);
				h.set_course_work(x, r, c);
				h.draw_lives_hero(x, r, c);
				h.set_bullets_hero(x, r, c, s);

				change_direction(ytflag, submover, submovec);
				submarine(x, submover, submovec);
				catchheart(x, s, heartflag1, heartflag2, poseheartr, poseheartc);
				catchposeheartr = poseheartr;
				catchposeheartc = poseheartc;
				display_screen_screen_screen(x, r, c);
				for (i = c + 1; i < c + 100; i++)
				{
					x[r + 29][i] = ' ';
				}
				s = '&';
				h.check_level_2(l);
				if (l == 1)
				{
					break;
				}
				if (h.l == -1)
				{
					ll = 1;
					break;
				}
				m++;
			}
		}
		if (h.l == -1)
		{
			deathheroposrow = h.hr;
			deathheroposcol = h.hc;
			ll = 1;
			break;
		}
		if (l == 1)
		{
			break;
		}
		s = _getch();
		if (s == ' ' && kkl <= 0 && x[h.hr + 7][h.hc] != ' ')
		{
			f = 1;
			kkl = 4;
		}
	}
	if (ll == 0)
	{
		if (ff == 1)
		{
			h.hr = 8, h.hc = 8;
			e[0].er = 23, e[0].ec = 150, e[0].d = 2;
			vv.err = 21, vv.ecc = 280, vv.fc = 0;
			ff = 2;
		}
		while (1)
		{
			if (l == 1)
			{
				if (ff == 1)
				{
					h.hr = 8, h.hc = 8;
					e[0].er = 23, e[0].ec = 150;
					vv.err = 21, vv.ecc = 280, vv.fc = 0;
					ff = 2;
				}
				while (!_kbhit())
				{
					h.set_terminal(r, c);
					h.set_bullets_hero(x, r, c, s);
					draw_map_level_2(x);
					if (m % 25 == 24 || f7 == 1)
					{
						vv.move_elevator_row();
						h.move_with_elevator_rows(vv.fr, vv.err, vv.ecc);
						f7 = 1;
						if (vv.err >= 70 || vv.err <= 21)
						{
							m = 0;
							f7 = 0;
						}
						vv.change_flag();
					}
					vv.draw_elevator(x);
					for (i = 0; i < 1; i++)
					{

						if (e[i].d > 0 && e[i].d <= 2)
						{
							for (int o = 0; o < 100; o++)
							{
								if (h.bh[o].f == 1)
								{
									e[i].damage_enemy(x, h.bh[o].br, h.bh[o].bc, h.bh[o].f);
								}
							}
							for (int o = 0; o < 16; o++)
							{
								if (h.bh[o].f == 1)
								{
									e[i].damage_enemy(x, h.bh[o].br, h.bh[o].bc, h.bh[o].f);
								}
								if (e[i].be[o].f == 0 & o >= 8)
								{
									e[i].be[o].set_positions(e[i].er + 1, e[i].ec - 2);
								}
								if (e[i].be[o].f == 0 && o < 8)
								{
									e[i].be[o].set_positions(e[i].er + 1, e[i].ec + 2);
								}
							}
							e[i].draw_health_enemy(x);
							e[i].draw_enemy(x);
							for (int o = 0; o < 8; o++)
							{
								e[i].be[o].draw_bullet_left(x);
								h.damage_hero(x, e[i].be[o].br, e[i].be[o].bc, e[i].be[o].f);
								e[i].be[o].hide_left_bullets(x);
								e[i].be[o].change_bullets_left();
							}
							for (int o = 8; o < 16; o++)
							{
								e[i].be[o].draw_bullet_right(x);
								h.damage_hero(x, e[i].be[o].br, e[i].be[o].bc, e[i].be[o].f);
								e[i].be[o].hide_right_bullets(x);
								e[i].be[o].change_bullets_right();
							}
							if (m % 20 == 1)
							{
								e[i].enemy_shoot(h.hr, h.hc);
							}
							e[i].reset_count_bullets();
						}
						h.count_kills(e[i].d);
						e[i].change_damage();
					}
					h.move_hero(x, s, y, vv.err, vv.ecc);
					b.change_direction(flag);
					b.draw_boss(x);
					b.boss_set_laser(h.hr, h.hc);
					b.ll[0].set_position_left_laser(b.br, b.bc, b.d);
					b.ll[1].set_position_right_laser(b.br, b.bc, b.d);
					for (int o = 0; o < 150; o++)
					{
						if (o < 2)
						{
							b.ll[o].set_count();
							b.ll[o].laser_fill_down(x);
						}
						if (o < 15)
						{
							b.bb[o].set_positions_bombs(b.br, b.bc);
							b.bb[o].hide_bomb(x);
							b.bb[o].draw_bomb(x);
							b.bb[o].change_row();

						}
						if (o < 50)
						{
							if (h.bh[o].f == 0)
							{
								h.bh[o].set_positions(h.hr + 2, h.hc + 2);
							}
						}
						if (o >= 50 && o < 100)
						{
							if (h.bh[o].f == 0)
							{
								h.bh[o].set_positions(h.hr + 2, h.hc - 2);
							}
						}
						if (o >= 100)
						{
							if (h.bh[o].f == 0)
							{
								h.bh[o].set_positions(h.hr + 1, h.hc - 2);
							}
						}
					}
					h.fire(x, s);
					if (m % 20 == 19)
					{
						b.boss_shoot(h.hr, h.hc);
					}
					if (f == 1)
					{
						k++;
						h.jump(x);
						if (k == 4)
						{
							f = 0;
							k = 0;
						}
					}
					if (f == 0 && y == 0) {
						h.gravity(x, kkl);
					}
					h.draw_hero(x, heartflag1, heartflag2);
					for (i = 0; i < 2; i++)
					{

						if (e[i].d > 0 && e[i].d <= 2)
						{
							for (int o = 0; o < 150; o++)
							{
								if (h.bh[o].f == 1 && o < 100)
								{
									e[i].damage_enemy(x, h.bh[o].br, h.bh[o].bc, h.bh[o].f);
								}
								if (h.bh[o].f > 0 && o > 100)
								{
									b.damage_boss(x, h.bh[o].br, h.bh[o].bc, h.bh[o].f);
								}
							}
							if (m % 20 == 1)
							{
								e[i].enemy_shoot(h.hr, h.hc);
							}
							e[i].reset_count_bullets();
						}
						h.count_kills(e[i].d);
						e[i].change_damage();
					}
					h.damage_hero_2(x);
					h.change_lives();
					draw_frame(x, r, c);
					h.draw_health_hero(x, r, c);
					h.set_number_kills(x, r, c);
					h.set_course_work(x, r, c);
					h.draw_lives_hero(x, r, c);
					h.set_bullets_hero(x, r, c, s);

					display_screen_screen_screen(x, r, c);
					for (i = c + 1; i < c + 100; i++)
					{
						x[r + 29][i] = ' ';
					}
					s = '&';
					if (h.hr >= 60 && h.hc <= 35)
					{
						break;
					}
					if (h.l == -1)
					{
						ll = 1;
						break;
					}
					m++;
				}
			}
			if (h.hr >= 60 && h.hc <= 35)
			{
				break;
			}
			if (h.l == -1)
			{
				ll = 1;
				break;
			}
			s = _getch();
			if (s == ' ' && kkl <= 0 && x[h.hr + 7][h.hc] != ' ')
			{
				f = 1;
				kkl = 4;
			}





		}
	}
	else
	{

		for (int hjklkj = 0; hjklkj < 90; hjklkj++) {
			for (int lkdsf = 0; lkdsf < 300; lkdsf++) {
				if (x[hjklkj][lkdsf] == 17) {
					x[hjklkj][lkdsf] = ' ';
				}
			}
		}
		herodeath(x, r, c, deathheroposrow, deathheroposcol);
		loser();
	}
	if (ll == 0)
	{
		winner();
	}

}