#include <iostream>
#include <Windows.h>

using namespace std;

const int rows = 47;
const int columns = 300;
int tempRow, tempColumn;
char map[47][1500];
int i, k, r, n, c, a = 0, b;
int LevelPointer;
bool GameOver;
bool PlayerDead;
int flagBatBullet = 0;
int singleCoinI = 0;
int batsNumber = 3;
int flagLast = 1;
int ctBack = 0;
int frogsNumber = 1;
int modeSky;
bool backToMenu;
int bulletDamage = 2;
int flagHeroDirection = 1;
int heroCoins = 0;
int cthbh = 0;

int rrlaser = 2, cclaser = 1300, cttlaser = 0;
int firstElevatorRow = 42;
int firstElevatorColumn = 284;

int secondElevatorRow = 36;
int secondElevatorColumn = 650;

int thirdElevatorRow = 39;
int thirdElevatorColumn = 1260;

int flagElevator;

HANDLE windowHandle = GetStdHandle(STD_OUTPUT_HANDLE);

inline int randNum(int min, int max) { return ((rand() % ((max - min) + 1)) + min); }

class Obstacle
{
protected:
	int obstacleRow;
	int obstacleColumn;

	unsigned char singleObstacle[100]{ 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 0 };

public:

	void DrawObstacle(int r, int c)
	{
		tempColumn = c;

		for (i = 0; this->singleObstacle[i] != 0; i++)
		{
			if (this->singleObstacle[i] != 10)
				map[r][c++] = this->singleObstacle[i];

			if (this->singleObstacle[i] == 10)
			{
				r++;
				c = tempColumn;
			}
		}
	}

	inline int getObstacleRow() { return this->obstacleRow; }
	inline int getObstacleColumn() { return this->obstacleColumn; }


	void setObstacleRowTo(int _obstacleRow) { this->obstacleRow = _obstacleRow; }
	void setObstacleColumnTo(int _obstacleColumn) { this->obstacleColumn = _obstacleColumn; }

};

Obstacle obstacle[4];

int obstaclesNumber = 4;

void setObstaclesPositions()
{
	for (i = 0, tempRow = 40, tempColumn = 20; i < obstaclesNumber; tempRow -= 6, tempColumn += 16, i++)
	{

		obstacle[i].setObstacleRowTo(tempRow);
		obstacle[i].setObstacleColumnTo(tempColumn);

	}

}

void DrawObstacles(int loop)
{
	int p;
	for (p = 0; p < loop; p++)
		obstacle[p].DrawObstacle(obstacle[p].getObstacleRow(), obstacle[p].getObstacleColumn());

}

class SingleCoins
{
public:
	int coinColumn;
	int coinRow;
	int flagCoin;
	char theCoin = '$';

	void DrawSingleCoin(int r, int c)
	{
		map[r][c] = this->theCoin;
	}
};
SingleCoins singleCoin[200];
int coinsNumber = 200;

void setCoinsPositions(int& i, int range, int r, int c)
{
	for (int k = 0; k < range; c += 16, i++, k++)
	{
		singleCoin[i].coinRow = r;
		singleCoin[i].coinColumn = c;
		singleCoin[i].flagCoin = 1;
	}
}

void DrawCoins(int loop)
{
	int p;
	for (p = 0; p < loop; p++)
	{
		if (singleCoin[p].flagCoin)
			singleCoin[p].DrawSingleCoin(singleCoin[p].coinRow, singleCoin[p].coinColumn);
	}

}

////////////////////////////////////////////////////////////////

void ClearMap()
{
	for (int r = 0; r < rows; r++)
		for (c = 0; c < 1500; c++)
			map[r][c] = ' ';
}




class Art
{
protected:

	int skyRow = 0;
	int skyColumn = 0;

	int groundRow = 46;
	int groundColumn = 0;

	int obstacleRow = 28;
	int obstacleColumn = 12;

	int ladderRow = 25;
	int ladderColumn = 85;

	int singleObstacleRow = 22;
	int singleObstacleColumn = 105;


	int tunnelRow = 14;
	int tunnelColumn = 300;

	
	int levelLaddersRow = 4;
	int levelLadderColumn = 700;

	int waslaRow = 7;
	int waslaColumn = 300;

	int obstacleSeaLevelRowH = 19;
	int  obstacleSeaLevelColumnH = 1000;
	int obstacleSeaLevelRowV = 19;
	int obstacleSeaLevelColumnV = 1150;


	string sky =

		"          .-~~~-.                           .-~~~-.                            .-~~~-.                           .-~~~-.                           .-~~~-.                           .-~~~-.                                 .-~~~-.                            .-~~~-.                       \n"
		"  .- ~ ~-(       )_ _               .- ~ ~-(       )_ _                .- ~ ~-(       )_ _               .- ~ ~-(       )_ _               .- ~ ~-(       )_ _               .- ~ ~-(       )_ _                     .- ~ ~-(       )_ _                .- ~ ~-(       )_ _                                        \n"
		" /                     ~ -.        /                     ~ -.         /                     ~ -.        /                     ~ -.        /                     ~ -.        /                     ~ -.              /                     ~ -.         /                     ~ -.                                 \n"
		"|                           )     |                           )      |                           )     |                           )     |                           )     |                           )           |                           )      |                           )                                       \n"
		"\\                         .'      \\                         .'       \\                         .'      \\                         .'      \\                         .'      \\                         .'       \\                         .'       \\                         .'                                              \n"
		"  ``~- . _____________ . -~           ~- . _____________ . -~             ~- . _____________ . -~           ~- . _____________ . -~           ~- . _____________ . -~           ~- . _____________ . -~                ~- . _____________ . -~             ~- . _____________ . -~                            \n";

	string sky2 =

		"     __   _               __   _                                    \n"
		"	   _(  )_( )_          	_(  )_( )_                             \n"
		"   (_   _    _)         (_   _    _)                        \n"
		"  / /(_) (__)          / /(_) (__)                            \n"
		" / / / / / /          / / / / / /                                    \n"
		"/ / / / / /          / / / / / /                                       \n"
		"______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________\n";

	unsigned char ground[4000] = { 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
		223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,  223, 223, 223, 223, 223,
		223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
		223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,  223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
		223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
		223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
		223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
		223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
		223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
		223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223,

								   0 };


	unsigned char obstacle[1000] = { 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,205,205,205,205,205,205,205,205,205,205,205,10,
		   32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,10,
		   32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,10,
			32,32,32,32,32,32,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,0 };

	unsigned char ladder[1000] =
	{ 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206 ,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
	 206,205,205,205,205,205,205,205,205,205,205,205,205,205,206,10,0 };

	unsigned char tunnel[10000]
	{ 223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223, 223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,                         223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223, 223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223   , 223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223, 223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223    ,   10,
	   177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,																							177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177	,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,10,
	
	   205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,	 205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,	205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,	 205,205,205,205,205,205,205,205,205,205,205,205,205,2	,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,	 205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205	,205,	10,
	   177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,																						177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 17	,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,10,
	   223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,							
	   32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,						32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32	,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32	,	10,
	   32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,						32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32	,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32	,	10,
	
	   32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,						32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32	,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32	,	10,
	   32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,							,	10,
	   32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,						32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32	,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32	,	10,
	   32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,						32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32	,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32	,	10,
	   32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,							,	10,
	   32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,							,	10,
	   32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,						32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32	,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32	,	10,
	   32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,						32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32	,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32	,	10,
	   32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,						32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32	,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32	,	10,
	   32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,						32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32	,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32, 32	,	10,
	   223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,							223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223	,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223		,10,
	   177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,																							177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177	,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,10,
	   233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,					233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233	,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233,233,233 ,233,233,233,233,233,233,233,233	,233,10,
	   205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,	  205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,	205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,	  205,205,205,205,205,205,205,205,205,205,205,205,205,205	,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205, 205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205 ,205,205,205,205,205,205,205,205,205,205,	10,
	   177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,																						177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177	,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177,177, 177, 177, 177, 177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177, 177, 177, 177, 177,177,177,177,177,177,10,
	   223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,							223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223	,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223		,0 };

	unsigned char square[10000] =
	{
	
	
	
	
	
	
	 219,219,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,219,10,
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	};

	unsigned char levelLadders[13000] =
	{
	
	 219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
	
	
	
	
	
	
	 219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
	
	
	
	
	
	 219,186,219,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32, 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
	
	 219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,186,223,223,223,223,10,
	 219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
	 219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
	 219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
	 219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
	 219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
	 219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
	 219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
	 219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
	 219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
	 219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
	 219,186,219,206,205,205,205,205,205,205,205,205,205,205,205,205,206,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,
	
	
	
	 219,186,219,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 206,205,205,205,205,205,205,205,205,205,205,205,205,206,10,
	
	
	
	
	
	
	
	
	



	};

	unsigned char singleObstacle[100]{ 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 0 };

	unsigned char waslaArt[100]{ 178,  178,  178, 178, 178,  178,  178,178,178,178,178, 178, 10, 10 ,10, 10 , 10, 10 ,  10,10,10,10,10,10,10,10, 178,178, 178,178,178,178 ,178, 178,  178,  178,  178, 178, 178,  178,178,0 };

	unsigned obstacleSeaLevelH[2000] =
	{
		219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,10,
		32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
		32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
		32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
		32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
		32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
		32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
		32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
		32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,10,
		32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
		32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
		32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
		32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
		32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
		32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
		  32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
		32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,10,0





	};
	unsigned obstacleSeaLevelV[2000] =
	{
	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,10,
	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,10,
	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
	32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,219,10,
	219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,10,0
	};


public:

	int squareRow = 5;
	int squareColumn = 500;

	void DrawSingleElevator(int r, int c)
	{
		for (i = 0; this->singleObstacle[i] != 0; i++)
			map[r][c++] = this->singleObstacle[i];
	}

	void DrawSky()
	{
		r = this->skyRow;
		c = this->skyColumn;

		if (modeSky == 1)
			for (i = 0; i < this->sky.length(); i++)
			{
				if (this->sky[i] != '\n')
					map[r][c++] = this->sky[i];

				if (this->sky[i] == '\n')
				{
					r++;
					c = this->skyColumn;
				}
			}

		else
			for (i = 0; i < this->sky2.length(); i++)
			{
				if (this->sky2[i] != '\n')
					map[r][c++] = this->sky2[i];

				if (this->sky2[i] == '\n')
				{
					r++;
					c = this->skyColumn;
				}
			}
	}

	void waslaConnect()
	{
		r = this->waslaRow;
		c = this->waslaColumn;

		for (i = 0; this->waslaArt[i] != 0; i++)
		{
			if (this->waslaArt[i] != 10)
				map[r++][c] = this->waslaArt[i];

			if (this->waslaArt[i] == 10)
			{
				r++;

			}
		}
	}

	void DrawobstacleSeaLevelH()
	{


		r = this->obstacleSeaLevelRowH;
		c = this->obstacleSeaLevelColumnH;

		for (i = 0; this->obstacleSeaLevelH[i] != 0; i++)
		{
			if (this->obstacleSeaLevelH[i] != 10)
				map[r][c++] = this->obstacleSeaLevelH[i];

			if (this->obstacleSeaLevelH[i] == 10)
			{
				r++;
				c = this->obstacleSeaLevelColumnH;
			}
		}
	}
	void DrawobstacleSeaLevelV()
	{


		r = this->obstacleSeaLevelRowV;
		c = this->obstacleSeaLevelColumnV;

		for (i = 0; this->obstacleSeaLevelV[i] != 0; i++)
		{
			if (this->obstacleSeaLevelV[i] != 10)
				map[r][c++] = this->obstacleSeaLevelV[i];

			if (this->obstacleSeaLevelV[i] == 10)
			{
				r++;
				c = this->obstacleSeaLevelColumnV;
			}
		}
	}

	void DrawGround()
	{
		r = this->groundRow;
		c = this->groundColumn;

		for (i = 0; this->ground[i] != 0; i++)
		{

			map[r][c++] = this->ground[i];


		}

		r = 7;
		c = 0;
		for (i = 0; this->ground[i] != 0; i++)
		{

			map[r][c++] = this->ground[i];


		}


	}

	void DrawTunnle()
	{
		r = this->tunnelRow;
		c = this->tunnelColumn;

		for (i = 0; this->tunnel[i] != 0; i++)
		{
			if (this->tunnel[i] != 10)
				map[r][c++] = this->tunnel[i];

			if (this->tunnel[i] == 10)
			{
				r++;
				c = this->tunnelColumn;
			}
		}
	}
	void DrawSquare(int r, int c)
	{
		int temp = c;
		for (i = 0; this->square[i] != 0; i++)
		{
			if (this->square[i] != 10)
				map[r][c++] = this->square[i];

			if (this->square[i] == 10)
			{
				r++;
				c = temp;
			}
		}
	}
	void DrawLevelLadders()
	{
		r = this->levelLaddersRow;
		c = this->levelLadderColumn;

		for (i = 0; this->levelLadders[i] != 0; i++)
		{
			if (this->levelLadders[i] != 10)
				map[r][c++] = this->levelLadders[i];

			if (this->levelLadders[i] == 10)
			{
				r++;
				c = this->levelLadderColumn;
			}
		}
	}


	void Drawladder()
	{
		r = this->ladderRow;
		c = this->ladderColumn;

		for (i = 0; this->ladder[i] != 0; i++)
		{
			if (this->ladder[i] != 10)
				map[r][c++] = this->ladder[i];

			if (this->ladder[i] == 10)
			{
				r++;
				c = this->ladderColumn;
			}
		}
	}

	void DrawObstacle()
	{
		r = this->obstacleRow;
		c = this->obstacleColumn;

		for (i = 0; this->obstacle[i] != 0; i++)
		{
			if (this->obstacle[i] != 10)
				map[r][c++] = this->obstacle[i];

			if (this->obstacle[i] == 10)
			{
				r += 4;
				c = this->obstacleColumn;
			}
		}
	}

	inline int getLadderRow() { return this->ladderRow; }
	inline int getLadderColumn() { return this->ladderColumn; }

	void setLadderRowTo(int _ladderRow) { this->ladderRow = _ladderRow; }
	void setLadderColumnTo(int _ladderColumn) { this->ladderColumn = _ladderColumn; }

};

Art art;

////////////////////////////////////////////////////////////////


class HeroHealth
{
protected:
	int heroHealthBarRow;
	int heroHealthBarColumn;
	int healthBarSize = 20;
	int heroLifes;
	int remainingHeal;

	char remainingHealChar = 178;
	char goneHealChar = 176;

public:

	void DrawHealthBar(int stillHeal)
	{
		for (i = 0; i < this->healthBarSize; i++)
		{
			if (i <= stillHeal)
				map[this->heroHealthBarRow][this->heroHealthBarColumn + i] = this->remainingHealChar;
			else
				map[this->heroHealthBarRow][this->heroHealthBarColumn + i] = this->goneHealChar;

		}
	}

	void setHeroHealthBarRowTo(int _heroHealthBarRow) { this->heroHealthBarRow = _heroHealthBarRow; }
	void setHeroHealthBarColumnTo(int _heroHealthBarColumn) { this->heroHealthBarColumn = _heroHealthBarColumn; }

	inline int getHeroHealthBarRow() { return this->heroHealthBarRow; }
	inline int getHeroHealthBarColumn() { return this->heroHealthBarColumn; }

	void setRemainingHealTo(int _remainingHeal) { this->remainingHeal = _remainingHeal; }
	inline int getRemainingHeal() { return this->remainingHeal; }

	void setHeroLifesTo(int _heroLifes) { this->heroLifes = _heroLifes; }
	inline int getHeroLifes() { return this->heroLifes; }
};

HeroHealth heroHealth;

////////////////////////////////////////////////////////////////

class FrogEnemy
{
protected:
	int frogRow;
	int frogColumn;
	int frogHeal;
	int frogFlag;

	string frogEnemy =
		"   _\n"
		" .'_`--.___   __\n"
		"( 'o`   - .`.'_ )\n"
		" `-._      `_`./_\n"
		"   '/\\    ( .'/ )\n"
		"  ,__//`---'`-'_/\n"
		"   /-'        '/   \n";

public:

	void DrawFrogEnemy(int r, int c)
	{


		tempColumn = c;

		for (i = 0; this->frogEnemy[i] != '\0'; i++)
		{
			if (this->frogFlag == 1)
				if (this->frogEnemy[i] != '\n')
					map[r][c++] = this->frogEnemy[i];

			if (this->frogEnemy[i] == '\n')
			{
				r++;
				c = tempColumn;
			}
		}

	}

	inline int getFrogRow() { return this->frogRow; }
	inline int getFrogColumn() { return this->frogColumn; }

	void setFrogRowTo(int _frogRow) { this->frogRow = _frogRow; }
	void setFrogColumnTo(int _frogColumn) { this->frogColumn = _frogColumn; }

	void setFrogFlagTo(int _frogFlag) { this->frogFlag = _frogFlag; }
};

FrogEnemy frogEnemy[1];

void setFrogEnemiesPositions()
{
	for (i = 0, tempRow = 38, tempColumn = 185; i < frogsNumber; tempRow += 2, tempColumn += 25, i++)
	{
		frogEnemy[i].setFrogRowTo(tempRow);
		frogEnemy[i].setFrogColumnTo(tempColumn);
		frogEnemy[i].setFrogFlagTo(1);
		//batEnemy[i].flagBatBullet = 1;
	}
}

void DrawFrogEnemies(int loop)
{
	int p;
	for (p = 0; p < loop; p++)
	{
		frogEnemy[p].DrawFrogEnemy(frogEnemy[p].getFrogRow(), frogEnemy[p].getFrogColumn());
		//frogEnemy[p].DrawFrogEnemy(frogEnemy[p].getBulletBatRow(), frogEnemy[p].getBulletBatColumn());
		//GravityToGround(batEnemy[p].getBulletBatRow(), batEnemy[p].getBulletBatColumn(), p);
	}

}

////////////////////////////////////////////////////////////////

class DogEnemy
{
protected:
	unsigned char dogEnemy[100] = { 32, 32, 45, 45, 32 ,32 ,32, 32 ,32 ,32, 45, 10,
				111, 39, 39, 41, 125, 45, 45, 45, 45, 47, 47, 10,
				32, 96, 95, 47, 32, 32, 32, 32 ,32, 32 ,41, 10,
				32, 40, 95, 40, 95, 47, 45, 40, 95, 47, 32, 0 };
	int dogRow;
	int dogColumn;
	int dogFlag;

public:


	void DrawDogEnemy(int r, int c)
	{
		tempColumn = c;

		for (i = 0; this->dogEnemy[i] != 0; i++)
		{
			if (this->dogFlag == 1)
				if (this->dogEnemy[i] != 10)
					map[r][c++] = this->dogEnemy[i];

			if (this->dogEnemy[i] == 10)
			{
				r++;
				c = tempColumn;
			}
		}
	}

	void MoveDog() {


		if (dogColumn == 520 || dogColumn == 521 || dogColumn == 522)
			dogFlag = 2;

		if (dogColumn == 630 || dogColumn == 631 || dogColumn == 632)
		{
			dogFlag = 1;
		}
		if (dogFlag == 2)
		{
			dogColumn += 3;
		}
		if (dogFlag == 1)
		{
			dogColumn -= 3;
		}

	}


	inline int getDogRow() { return this->dogRow; }
	inline int getDogColumn() { return this->dogColumn; }

	void setDogRowTo(int _dogRow) { this->dogRow = _dogRow; }
	void setDogColumnTo(int _dogColumn) { this->dogColumn = _dogColumn; }

	inline int getDogFlag() { return this->dogFlag; }
	void setDogFlagTo(int _dogFlag) { this->dogFlag = _dogFlag; }

};

DogEnemy dogEnemy[7];
int dogsNumber = 7;

void setDogEnemiesPositions()
{

	for (i = 0, tempRow = 33, tempColumn = 550; i < dogsNumber; i++)
	{
		if (i % 2 == 0)
		{
			dogEnemy[i].setDogRowTo(tempRow);
			dogEnemy[i].setDogColumnTo(tempColumn);
			tempColumn += 13;
		}
		else
		{
			dogEnemy[i].setDogRowTo(tempRow);
			dogEnemy[i].setDogColumnTo(tempColumn);
			tempColumn += 15;
		}

		dogEnemy[i].setDogFlagTo(1);
	}
}

void DrawDogEnemies(int loop)
{

	for (int p = 0; p < loop; p++)
	{
		dogEnemy[p].DrawDogEnemy(dogEnemy[p].getDogRow(), dogEnemy[p].getDogColumn());

		//GravityToGround(batEnemy[p].getBulletBatRow(), dogEnemy[p].getBulletBatColumn(), p);
	}

}



class BatEnemy
{
protected:
	int batRow;
	int batColumn;
	int batHeal;
	int bulletBatRow;
	int bulletBatColumn;
	int flagBatBullet;
	int batFlag;

	char batBulletChar = 248;



	unsigned char batArt[1000] = { 32, 32, 40, 95, 32, 32, 32, 32, 46, 46, 32, 32, 32, 32, 95, 41, 10,
								   32, 32, 47, 32, 96 ,39, 45, 45, 41, 32, 40, 45, 45 ,39, 96, 32, 92, 10,
								   32, 47 ,32, 32, 95, 44, 45, 39, 92 ,95, 47, 39, 45, 44, 95, 32, 32, 92, 10,
								   47, 46, 45, 39, 32, 32, 32, 32, 32, 39, 32, 32, 32, 32, 32, 39, 45, 46 ,92, 0 };

public:


	void DrawBatBullet(int r, int c)
	{
		if (this->flagBatBullet == 1)
			map[r][c] = batBulletChar;
	}

	void DrawBatEnemy(int r, int c)
	{
		tempColumn = c;

		for (i = 0; this->batArt[i] != 0; i++)
		{
			if (this->batFlag == 1)
				if (this->batArt[i] != 10)
					map[r][c++] = this->batArt[i];

			if (this->batArt[i] == 10)
			{
				r++;
				c = tempColumn;
			}
		}
	}

	inline int getBatRow() { return this->batRow; }
	inline int getBatColumn() { return this->batColumn; }

	void setBatRowTo(int _batRow) { this->batRow = _batRow; }
	void setBatColumnTo(int _batColumn) { this->batColumn = _batColumn; }

	inline int getBatFlag() { return this->batFlag; }
	void setBatFlagTo(int _batFlag) { this->batFlag = _batFlag; }

	inline int getBatHeal() { return this->batHeal; }
	void setBatHealTo(int _batHeal) { this->batHeal = _batHeal; }

	inline int getBulletBatRow() { return this->bulletBatRow; }
	inline int getBulletBatColumn() { return this->bulletBatColumn; }
	inline int getBulletBatFlag() { return this->flagBatBullet; }

	void setBulletBatRowTo(int _bulletBatRow) { this->bulletBatRow = _bulletBatRow; }
	void setBulletBatColumnTo(int _bulletBatColumn) { this->bulletBatColumn = _bulletBatColumn; }
	void setBulletBatFlagTo(int _flagBatBullet) { this->flagBatBullet = _flagBatBullet; }

	inline char getBatBulletChar() { return this->batBulletChar; }
};

BatEnemy batEnemy[3];

///////////////////////////////////////////////////////////////
class Laser
{
protected:


	char laserChar = 196;

public:

	int laserSize;
	int laserRow;
	int flagLaser;
	int laserColumn;


	void DrawLaser()
	{
		if (this->flagLaser == 1)
		{
			c = this->laserColumn;
			for (r = this->laserRow; c < this->laserColumn + this->laserSize; )
			{
				map[r][c++] = this->laserChar;
			}
		}
	}

	void setLaserPositions(int _laserRow, int  _laserColumn)
	{
		this->laserRow = _laserRow + 5;


		this->laserColumn = _laserColumn + 11;
	}

	void setLaser()
	{

		this->laserSize = 20;
		this->flagLaser = 0;

	}


	void setFlagLaser(int _flagLaser) { this->flagLaser = _flagLaser; }
	inline int getFlaglaser() { return this->flagLaser; }


};

Laser laser;

void CheckLaserWithBat()
{
	for (i = 0; i < batsNumber; i++)
	{
		if (batEnemy[i].getBatRow() <= laser.laserRow &&
			batEnemy[i].getBatRow() + 3 >= laser.laserRow - 2 &&
			laser.laserColumn + laser.laserSize >= batEnemy[i].getBatColumn() &&
			laser.laserColumn + laser.laserSize <= batEnemy[i].getBatColumn() + 16)
		{
			batEnemy[i].setBatFlagTo(0);
			batEnemy[i].setBulletBatFlagTo(0);
		}
	}
}

void CheckLaserWithFrog()
{
	if (laser.flagLaser == 1)
	{
		for (i = 0; i < frogsNumber; i++)
		{
			if (frogEnemy[i].getFrogRow() - 1 <= laser.laserRow &&
				frogEnemy[i].getFrogRow() + 3 >= laser.laserRow &&
				laser.laserColumn + laser.laserSize >= frogEnemy[i].getFrogColumn() &&
				laser.laserColumn <= frogEnemy[i].getFrogColumn())
			{
				frogEnemy[i].setFrogFlagTo(0);
				frogEnemy[i].setFrogColumnTo(0);
				//batEnemy[i].setBulletBatFlagTo(0);
			}
		}
	}
}

void CheckLaserWithDogs()
{
	if (laser.flagLaser == 1)
	{
		for (i = 0; i < dogsNumber; i++)
		{
			if (dogEnemy[i].getDogRow() - 1 <= laser.laserRow &&
				dogEnemy[i].getDogRow() + 3 >= laser.laserRow &&
				laser.laserColumn + laser.laserSize >= dogEnemy[i].getDogColumn() &&
				laser.laserColumn <= dogEnemy[i].getDogColumn())
			{
				dogEnemy[i].setDogFlagTo(0);
				dogEnemy[i].setDogColumnTo
				(0);
				//batEnemy[i].setBulletBatFlagTo(0);
			}
		}
	}
}


////////////////////////////////////////////////////////////////

class Hero
{
protected:
	unsigned char rightHero[96] =
	{ 255,255,255,220,219,219,219,219,220,220,10,
	  255,255,255,220,223,219,223,222,192,196,191,10,
	  255,255,255,219,220,222,221,220,219,220,217,10,
	  255,255,255,192,220,220,220,220,196,217,255,10,
	  220,219,219,219,177,219,219,177,219,219,219,220,10
	  ,177,177,219,220,177,177,177,177,220,219,177,177,10,
	  255,255,177,177,177,223,177,177,177,10,
	  220,219,219,219,255,255,255,219,219,219,220 };


	unsigned char leftHero[300] =

	{ 255,255,220,220,219,219,219,219, 220,10,
	  255,218, 196, 217, 221, 223, 219, 223, 220, 10,
	  255,192, 220, 219, 220, 222, 221 ,220, 219, 10,
	  255,32, 192, 196, 220, 220, 220, 220, 217,  10,
	  220,219,219,219,177,219,219,177,219,219,219,220,10,
	  177,177,219,220,177,177,177,177,220,219,177,177,10,
	  32,32,177,177,177,223,177,177,177,10,
	  220,219,219,219,32,32,32,219,219,219,220 };


	int heroRow;
	int heroColumn;
	int bulletRow = heroRow + 5;
	int bulletColumn = heroColumn + 12;
	int startBulletRow;
	int startBulletColumn;
	int flagSingleBulletDraw = 0;
	int flagAutoBulletDraw = 0;
	int flagBrustBulletDraw = 0;
	int flagChangeBulletPos = 0;
	int jumpLimitCounter = 0;
	int sideJumpSize = 4;
	int walkingStep = 5;
	int bulletsArray[100];
	int flagCheckLadder = 0;
	int checkRightFlag = 0;
	int checkLeftFlag = 0;
	int checkUpFlag = 0;
	int checkDownFlag = 0;

	char heroSingleBullet = 248;

	void Reset()
	{
		this->heroRow = 10;
		this->heroColumn = 0;
		this->bulletRow = heroRow + 5;
		this->bulletColumn = heroColumn + 12;
		this->heroSingleBullet = 248;
		this->flagSingleBulletDraw = 0;
		this->flagBrustBulletDraw = 0;
		this->flagAutoBulletDraw = 0;
		this->flagChangeBulletPos = 0;
	}

	void UpdateBulletPosition()
	{
		if (this->flagSingleBulletDraw == 0 && flagHeroDirection == 1)
		{
			this->bulletRow = this->heroRow + 5;
			this->bulletColumn = this->heroColumn + 12;
		}

	}

	void fillBulletsArray()
	{
		for (i = 0; i < 100; i++)
			this->bulletsArray[i] = 0;
	}

	void setBulletsPositions()
	{
		bulletRow = this->heroRow + 5;
		bulletColumn = this->heroColumn + 12;

		bulletsArray[a] = this->heroRow + 5;
		bulletsArray[a + 1] = this->heroColumn + 12;
	}


public:
	int firingMode = 1;

	void DrawHero()
	{
		r = this->heroRow;
		c = this->heroColumn;

		if (flagHeroDirection == 1)
			for (i = 0; this->rightHero[i] != '\0'; i++)
			{
				if (this->rightHero[i] != 10)
					map[r][c++] = this->rightHero[i];

				if (this->rightHero[i] == 10)
				{
					r++;
					c = this->heroColumn;
				}
			}

		if (flagHeroDirection == 0)
			for (i = 0; this->leftHero[i] != '\0'; i++)
			{
				if (this->leftHero[i] != 10)
					map[r][c++] = this->leftHero[i];

				if (this->leftHero[i] == 10)
				{
					r++;
					c = this->heroColumn;
				}
			}

	}

	void BulletMove()
	{
		int stillHeal;
		int batHeal;

		if (this->flagSingleBulletDraw == 1)
		{
			if (map[this->bulletRow][this->bulletColumn + 3] == 32)
				this->bulletColumn += 3;
			else
				this->flagSingleBulletDraw = 0;

			for (i = 0; i < batsNumber; i++)
			{
				if (batEnemy[i].getBatFlag())
				{
					if (this->bulletRow >= batEnemy[i].getBatRow() && this->bulletRow <= batEnemy[i].getBatRow() + 4
						&& this->bulletColumn >= batEnemy[i].getBatColumn() - 1)
					{
						this->flagSingleBulletDraw = 0;
						batEnemy[i].setBatHealTo(batEnemy[i].getBatHeal() - 1);

						if (!batEnemy[i].getBatHeal())
						{
							batEnemy[i].setBatFlagTo(0);

							batEnemy[i].setBulletBatFlagTo(0);
							batEnemy[i].setBatColumnTo(0);
						}
					}
				}
			}

			for (i = 0; i < frogsNumber; i++)
				if (this->bulletRow >= frogEnemy[i].getFrogRow() && this->bulletRow <= frogEnemy[i].getFrogRow() + 7
					&& this->bulletColumn >= frogEnemy[i].getFrogColumn() && this->bulletColumn <= frogEnemy[i].getFrogColumn() + 11)
					this->flagSingleBulletDraw = 2;
		}


		if (this->flagSingleBulletDraw == 2)
		{
			stillHeal = heroHealth.getRemainingHeal();

			if (this->heroColumn + 11 < this->bulletColumn)
				this->bulletColumn -= 3;

			else
				this->flagSingleBulletDraw = 0;


			if (this->flagSingleBulletDraw)
				if (this->bulletColumn <= this->heroColumn + 10)
				{
					stillHeal -= bulletDamage;
					heroHealth.setRemainingHealTo(stillHeal);
				}
		}

		if (this->flagBrustBulletDraw == 1)
		{
			if (map[this->bulletRow][this->bulletColumn + 3] == 32)
				this->bulletColumn += 3;
			else
				this->flagBrustBulletDraw = 0;

			for (i = 0; i < batsNumber; i++)
			{
				if (batEnemy[i].getBatFlag())
				{
					if (this->bulletRow >= batEnemy[i].getBatRow() && this->bulletRow <= batEnemy[i].getBatRow() + 4
						&& this->bulletColumn >= batEnemy[i].getBatColumn() - 1)
					{
						this->flagBrustBulletDraw = 0;
						batEnemy[i].setBatHealTo(batEnemy[i].getBatHeal() - 2);

						if (batEnemy[i].getBatHeal() <= 0)
						{
							batEnemy[i].setBatFlagTo(0);
							batEnemy[i].setBulletBatFlagTo(0);
							batEnemy[i].setBatColumnTo(0);
						}
					}
				}
			}

			for (i = 0; i < frogsNumber; i++)
			{
				if (this->bulletRow + 1 >= frogEnemy[i].getFrogRow() && this->bulletRow - 1 <= frogEnemy[i].getFrogRow() + 7
					&& this->bulletColumn >= frogEnemy[i].getFrogColumn() && this->bulletColumn <= frogEnemy[i].getFrogColumn() + 11)
				{
					this->flagBrustBulletDraw = 2;
				}
			}
		}

		if (this->flagBrustBulletDraw == 2)
		{
			stillHeal = heroHealth.getRemainingHeal();

			if (this->heroColumn + 11 < this->bulletColumn)
				this->bulletColumn -= 3;

			else
				this->flagBrustBulletDraw = 0;

			if (this->flagBrustBulletDraw)
				if (this->bulletColumn <= this->heroColumn + 10)
				{
					stillHeal -= bulletDamage * 3;
					heroHealth.setRemainingHealTo(stillHeal);
				}
		}

		if (this->flagAutoBulletDraw == 1 && this->bulletsArray[i + 2] == 1)
		{
			if (map[this->bulletsArray[i]][this->bulletsArray[i + 1] + 3] == 32)
				this->bulletsArray[i + 1] += 3;

			else if (map[this->bulletsArray[i]][this->bulletsArray[i + 1]] == this->heroSingleBullet)
				this->bulletsArray[i + 1] += 3;

			else
				this->bulletsArray[i + 2] = 0;

			for (k = 0; k < batsNumber; k++)
			{
				if (batEnemy[k].getBatFlag())
				{
					if (this->bulletsArray[i] >= batEnemy[k].getBatRow() && this->bulletsArray[i] <= batEnemy[k].getBatRow() + 4
						&& this->bulletsArray[i + 1] >= batEnemy[k].getBatColumn() - 1)
					{
						//this->flagAutoBulletDraw = 0;
						this->bulletsArray[i + 2] = 0;

						batEnemy[k].setBatHealTo(batEnemy[k].getBatHeal() - 1);

						if (batEnemy[k].getBatHeal() <= 0)
						{
							batEnemy[k].setBatFlagTo(0);
							batEnemy[k].setBulletBatFlagTo(0);
						}
					}
				}
			}


			for (k = 0; k < frogsNumber; k++)
			{
				if (this->bulletsArray[i] >= frogEnemy[k].getFrogRow() && this->bulletsArray[i] <= frogEnemy[k].getFrogRow() + 7
					&& this->bulletsArray[i + 1] >= frogEnemy[k].getFrogColumn())
				{
					this->flagAutoBulletDraw = 2;
					this->bulletsArray[i + 2] = 2;
				}
			}
		}

		if (this->flagAutoBulletDraw == 2 && this->bulletsArray[i + 2] == 2)
		{
			if (this->heroColumn + 11 < this->bulletsArray[i + 1] - 3)
				this->bulletsArray[i + 1] -= 3;


			else
			{
				this->bulletsArray[i + 2] = 0;
				this->flagAutoBulletDraw = 0;
			}
		}



	}

	void BulletDraw()
	{
		if (this->flagSingleBulletDraw == 1 || this->flagSingleBulletDraw == 2)
		{
			map[this->bulletRow][this->bulletColumn] = heroSingleBullet;
			this->BulletMove();
		}

		if (this->flagBrustBulletDraw == 1)
		{

			map[this->bulletRow - 1][this->bulletColumn + 1] = this->heroSingleBullet;
			map[this->bulletRow][this->bulletColumn] = this->heroSingleBullet;
			map[this->bulletRow + 1][this->bulletColumn + 1] = this->heroSingleBullet;
			this->BulletMove();
		}

		// Mirroring the bullets
		if (this->flagBrustBulletDraw == 2)
		{

			map[this->bulletRow - 1][this->bulletColumn - 1] = this->heroSingleBullet;
			map[this->bulletRow][this->bulletColumn] = this->heroSingleBullet;
			map[this->bulletRow + 1][this->bulletColumn - 1] = this->heroSingleBullet;
			this->BulletMove();
		}

		if (this->flagAutoBulletDraw == 1 || this->flagAutoBulletDraw == 2)
		{

			for (i = 0; i < 100 - 4; i += 3)
			{
				if (this->bulletsArray[i + 2] == 1)
				{
					map[this->bulletsArray[i]][this->bulletsArray[i + 1]] = this->heroSingleBullet;
					this->BulletMove();
				}

				if (this->bulletsArray[i + 2] == 2)
				{
					map[this->bulletsArray[i]][this->bulletsArray[i + 1]] = this->heroSingleBullet;
					this->BulletMove();
				}
			}

		}
	}

	int HeroIsOnElevator(int r, int c)
	{
		if (this->heroRow + 8 == r - 1 && this->heroColumn + 11 >= c && this->heroColumn <= c + 2)
			return 1;
		else
			return 0;
	}


	void CheckLadderPosition()
	{

		if (this->heroColumn + 11 >= art.getLadderColumn() - 3 && this->heroColumn <= art.getLadderColumn() + 18)
			this->flagCheckLadder = 1;

		else if (this->heroColumn <= art.getLadderColumn() + 18 && this->heroColumn >= art.getLadderColumn() + 15)
			this->flagCheckLadder = 1;

		else    if (this->heroColumn > 703)
			this->flagCheckLadder = 1;

		else if (this->heroColumn <= 703 + 15 && this->heroColumn >= 703 + 12)
			this->flagCheckLadder = 1;



		else if (this->heroColumn + 11 >= 983 - 5 && this->heroColumn <= 1000 + 18)
			this->flagCheckLadder = 1;

		else
			this->flagCheckLadder = 0;
	}


	void CheckLadderUp()
	{
		if (this->flagCheckLadder == 1 && this->heroRow - 4 > art.getLadderRow() - 4)
		{
			this->checkUpFlag = 1;
		}
		else if (this->flagCheckLadder == 1 && this->heroRow - 4 > 23 - 4)
		{
			this->checkUpFlag = 1;
		}
		else if (this->flagCheckLadder == 1 && this->heroRow - 4 > 34 - 4)
		{
			this->checkUpFlag = 1;
		}

	}

	void CheckLadderDown()
	{
		if (this->flagCheckLadder == 1 && this->heroRow + 9 < art.getLadderRow() + 19)
		{
			this->checkDownFlag = 1;
		}
		else if (this->flagCheckLadder == 1 && this->heroRow + 11 < 23 + 10)
		{
			this->checkDownFlag = 1;
		}
		else if (this->flagCheckLadder == 1 && this->heroRow + 11 < 34 + 10)
		{
			this->checkDownFlag = 1;
		}
		else
			this->checkDownFlag = 0;
	}

	void CheckUp()
	{
		checkUpFlag = 1;
		for (k = this->heroColumn; k < this->heroColumn + 12; k++)
		{
			for (i = 1; i <= 4; i++)
			{
				if (map[this->heroRow - i][k] != ' ')
				{
					this->checkUpFlag = 0;
					break;
				}

			}
		}

	}

	void HeroActions()
	{
		if (GetAsyncKeyState(0x4B) && heroCoins >= 5)
			flagLast = 2;
		//cout << this->flagBrustBulletDraw << endl;
		if (GetAsyncKeyState(VK_LEFT))
		{
			flagHeroDirection = 0;
			CheckLadderPosition();
			checkLeftFlag = 1;
			for (k = this->heroRow; k < this->heroRow + 8; k++)
			{
				for (i = 1; i <= this->walkingStep; i++)
				{
					if (map[k][this->heroColumn - i] != ' ' && map[k][this->heroColumn - i] != '$')
					{
						checkLeftFlag = 0;
						break;
					}

				}

			}
			if (this->checkLeftFlag == 1 || this->flagCheckLadder == 1)
			{
				this->heroColumn -= this->walkingStep;

				//this->UpdateBulletPosition();
			}

			this->UpdateBulletPosition();
		}

		if (GetAsyncKeyState(VK_RIGHT))
		{
			CheckLadderPosition();
			this->checkRightFlag = 1;
			flagHeroDirection = 1;

			for (k = this->heroRow; k < this->heroRow + 8; k++)
			{
				for (i = 1; i <= this->walkingStep; i++)
				{
					if (map[k][heroColumn + 11 + i] != ' ' && map[k][heroColumn + 11 + i] != '$')
					{
						checkRightFlag = 0;
						break;
					}

				}

			}
			if (this->checkRightFlag == 1 || this->flagCheckLadder == 1)
			{
				this->heroColumn += this->walkingStep;
				//this->UpdateBulletPosition();
			}
			this->UpdateBulletPosition();
		}

		if (GetAsyncKeyState(VK_UP))
		{
			CheckUp();
			CheckLadderUp();
			if (this->checkUpFlag == 1)
			{
				this->jumpLimitCounter++;

				if (this->jumpLimitCounter <= 2)
				{
					PlaySound(TEXT("sounds\\Jump.wav"), NULL, SND_ASYNC);
					this->heroRow -= 6;
					this->DrawHero();
					art.DrawSky();
					art.DrawGround();

					art.Drawladder();
					ClearMap();
					ClearMap();
					this->UpdateBulletPosition();
				}
			}
		}


		if (GetAsyncKeyState(VK_DOWN))
		{
			CheckUp();
			CheckLadderDown();
			if (checkDownFlag == 1)
			{
				this->heroRow++;
				this->UpdateBulletPosition();
			}
		}

		// Key F
		if (GetAsyncKeyState(0x46))
		{
			this->setBulletsPositions();

			if (firingMode == 1)
			{
				PlaySound(TEXT("sounds\\bumb.wav"), NULL, SND_ASYNC);
				this->flagBrustBulletDraw = 0;
				this->flagAutoBulletDraw = 0;
				this->flagSingleBulletDraw = 1;

				this->startBulletColumn = this->bulletColumn;
			}

			if (firingMode == 2)
			{
				PlaySound(TEXT("sounds\\BrustMode.wav"), NULL, SND_ASYNC);
				this->flagSingleBulletDraw = 0;
				this->flagAutoBulletDraw = 0;
				this->flagBrustBulletDraw = 1;

				//this->startBulletColumn = this->bulletColumn;
			}

			if (firingMode == 3)
			{
				PlaySound(TEXT("sounds\\bumb.wav"), NULL, SND_ASYNC);
				this->flagSingleBulletDraw = 0;
				this->flagBrustBulletDraw = 0;
				this->flagAutoBulletDraw = 1;

				cthbh++;

				if (cthbh > 1)
				{
					if (a >= 96)
						a = 0;
					a += 3;
					this->bulletsArray[a + 2] = 1;
				}
				else
				{
					this->fillBulletsArray();
					this->setBulletsPositions();

					// flag auto
					this->bulletsArray[a + 2] = 1;
				}
			}
		}




		// Key L
		if (GetAsyncKeyState(0x4C))
		{
			laser.flagLaser = 1;
			PlaySound(TEXT("sounds\\laser.wav"), NULL, SND_ASYNC);
		}
		else
			laser.flagLaser = 0;

		for (i = 0; i < singleCoinI; i++)
			if (this->heroColumn + 11 >= singleCoin[i].coinColumn && this->heroColumn <= singleCoin[i].coinColumn && singleCoin[i].coinRow >= this->heroRow && singleCoin[i].coinRow <= this->heroRow + 11)
			{

				if (singleCoin[i].flagCoin == 1)
				{
					PlaySound(TEXT("sounds\\1coin.wav"), NULL, SND_ASYNC);
					heroCoins += 5;
					//cout << heroCoins << endl;
				}
				singleCoin[i].flagCoin = 0;

			}


	}


	void moveElevator(int& r, int& c, int whoAreYou)
	{

		if (whoAreYou == 1)
		{
			if (this->HeroIsOnElevator(r, c))
			{
				if (flagElevator == 0)
					if (r >= 26)
					{
						this->heroRow -= 2;
						r -= 2;

					}
					else
						flagElevator = 1;

				if (flagElevator == 1)
					if (r <= 42)
					{
						r += 4;
						this->heroRow += 2;
					}
					else
						flagElevator = 0;

			}

		}
		if (whoAreYou == 2)
		{
			if (this->HeroIsOnElevator(r, c))
			{
				if (r >= 22)
				{
					this->heroRow -= 2;
					r -= 2;
				}
				else
				{
					this->heroRow = 34;
					this->heroColumn += 56;
				}
			}
		}


		if (whoAreYou == 3)
		{
			if (this->HeroIsOnElevator(r, c))
			{
				if (flagElevator == 0)
					if (r >= 32)
					{
						this->heroRow -= 2;
						this->heroColumn += 2;
						r -= 2;
						c += 2;

					}
					else
						flagElevator = 1;

				if (flagElevator == 1)
					if (r <= 42)
					{
						r += 4;
						c -= 4;
						this->heroRow += 2;
						this->heroColumn -= 4;
					}
					else
						flagElevator = 0;
			}

		}

	}

	inline int getHeroRow() { return this->heroRow; }
	inline int getHeroColumn() { return this->heroColumn; }
	inline int getJumpLimitCounter() { return this->jumpLimitCounter; }

	void setHeroRowTo(int _heroRow) { this->heroRow = _heroRow; }
	void setHeroColumnTo(int _heroColumn) { this->heroColumn = _heroColumn; }
	void setJumpLimitCounterTo(int _jumpLimitCounter) { this->jumpLimitCounter = _jumpLimitCounter; }
};


void drawlaser( char map[][1500],int rlaser,int claser)
{
	for (int i=rlaser;i<rlaser+45;i++)
	{
		map[i][claser] = '|';
	}

}
Hero hero;

///////////////////////////////////////////////////////////////
class EEnemy
{
public:
	int enemyRow = 19;
	int enemyColomun = 1410;

	int messageRow = 25;
	int messageColumn = 1280;

	unsigned enemyFinal[400] =
	{ 32, 32, 32, 32, 46, 45, 45, 45, 45, 45, 46, 10, 32, 32, 32, 46, 39, 32, 45, 32, 32, 32, 45, 32, 39, 46, 10,
		32, 32, 47, 32, 32, 46, 45, 46, 32, 46, 45, 46, 32, 32, 92, 10, 32, 32, 124, 32, 32, 124, 32, 124, 32, 124, 32, 124, 32, 32, 124, 10,
		32, 32, 92, 32, 92, 111, 47, 32, 92, 111, 47, 32, 47, 10, 32, 32, 95, 47, 32, 32, 32, 32, 94, 32, 32, 32, 32, 92, 95, 10,
		124, 32, 92, 32, 32, 39, 45, 45, 45, 39, 32, 32, 47, 32, 124, 10, 32, 47, 32, 47, 96, 45, 45, 46, 32, 46, 45, 45, 96, 92, 32, 92, 10,
		47, 32, 47, 39, 45, 45, 96, 32, 96, 45, 45, 45, 39, 92, 32, 92, 10, 39, 46, 95, 95, 46, 32, 32, 32, 32, 32, 32, 46, 95, 95, 46, 39, 10,
		32, 32, 32, 96, 124, 32, 32, 32, 32, 32, 124, 96, 10, 32, 32, 32, 32, 32, 124, 32, 32, 32, 32, 32, 92, 10,
		32, 32, 32, 32, 32, 92, 32, 32, 32, 32, 32, 32, 39, 45, 45, 46, 10, 32, 32, 32, 32, 32, 32, 39, 46, 32, 32, 32, 32, 32, 32, 32, 96, 92, 10,
		32, 32, 32, 32, 32, 32, 32, 96, 39, 45, 45, 45, 46, 32, 32, 124, 10,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 44, 95, 95, 41, 32, 47, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 96, 46, 46, 39, 0 };

	string crateMessate =
		"  ______________ ____ \n"
		" |  U have a power |\n"  
		" | try figure it OUT  |\n"
		" |           K??             |\n"
		" |______  ______ ___  |\n"
		"        \\/ \n";
	void DrawEnemy()
	{
		r = this->enemyRow;
		c = this->enemyColomun;


		for (i = 0; this->enemyFinal[i] != 0; i++)
		{
			if (this->enemyFinal[i] != 10)
				map[r][c++] = this->enemyFinal[i];

			if (this->enemyFinal[i] == 10)
			{
				r++;
				c = this->enemyColomun;
			}
		}
	}
};
EEnemy aime;

void DrawMessage()
{
	r = aime.messageRow;
	c = aime.messageColumn;

	for (i = 0; i < aime.crateMessate.length(); i++)
	{
		if (aime.crateMessate[i] != '\n')
			map[r][c++] = aime.crateMessate[i];

		if (aime.crateMessate[i] == '\n')
		{
			r++;
			c = aime.messageColumn;
		}
	}
}

void MoveLastEnemy()
{

	if (flagLast == 1)
		if (aime.enemyColomun>= 1310)
		{
			aime.enemyColomun -= 4;


		}
		else
			flagLast = 0;

	if (flagLast == 0)
		if (aime.enemyColomun <= 1410)
		{

			aime.enemyColomun += 4;
		}
		else
			flagLast = 1;

	if (aime.enemyColomun - 5 <= hero.getHeroColumn())
	{
		hero.setHeroColumnTo(1260);
		hero.setHeroRowTo(24);
		ctBack++;

		
	}
}

class Coins
{
protected:
	char coin = 156;
	int coinRow;
	int coinColoumn;
	int CoinFlag;
	int CoinCounter;
	int NumberCoins = 30;
	int coinSpace = 20;
public:
	void setcointo(char coin) { this->coin = coin; };
	void setCoinRowto(int coinRow) { this->coinRow = coinRow; };
	void setCoinColumnto(int coinColumn) { this->coinColoumn = coinColumn; };
	void setNumberCoinsto(int NumberCoins) { this->NumberCoins = NumberCoins; };
	void setCoinFlagto(int CoinFlag) { this->CoinFlag = CoinFlag; };
	void setCoinCounterto(int CoinCounter) { this->CoinCounter = CoinCounter; };

	int getCoinCounterto() { return this->CoinCounter; };
	int getcoinRowto() { return this->coinRow; };
	int getcoinColoumnto() { return this->coinColoumn; };
	int getNumberCoinsto() { return this->NumberCoins; };
	int getCoinFlag() { return this->CoinFlag; };
	char getCoin() { return this->coin; };

	void drawCoin(int coinRow, int coinColoumn)
	{
		this->coinRow = coinRow;
		this->coinColoumn = coinColoumn;
		for (int i = 0;i < NumberCoins;i++)
		{
			map[coinRow][coinColoumn] = coin;
			c += coinSpace;

		}
	};

};
//////////////////////new
Coins Coin[1];
void countCoins()
{
	if (hero.getHeroColumn() + 12 == Coin[0].getcoinColoumnto())
	{
		map[Coin[0].getcoinRowto()][Coin[0].getcoinColoumnto()] = ' ';
		Coin[0].setCoinCounterto(Coin[0].getCoinCounterto() + 1);
	}

}



void GravityToGround(int r, int c, int w)
{
	int stillHeal = heroHealth.getRemainingHeal();
	if (map[r + 1][c] == 32)
	{
		r += 2;
		batEnemy[w].setBulletBatRowTo(r);
	}
	else
	{
		if (r + 1 >= hero.getHeroRow() && c >= hero.getHeroColumn() - 2 && c <= hero.getHeroColumn() + 9)
		{
			if (map[r][c] = batEnemy->getBatBulletChar())
			{
				stillHeal -= bulletDamage;
				heroHealth.setRemainingHealTo(stillHeal);
			}
		}

		batEnemy[w].setBulletBatRowTo(batEnemy[w].getBatRow() + 4);
	}
}

void setBatEnemiesPositions()
{

	for (i = 0, tempRow = 13, tempColumn = 105; i < batsNumber; tempRow += 2, tempColumn += 24, i++)
	{
		if (i == 2)
			tempRow = 10;

		batEnemy[i].setBatRowTo(tempRow);
		batEnemy[i].setBatColumnTo(tempColumn);
		batEnemy[i].setBulletBatFlagTo(1);

		batEnemy[i].setBulletBatRowTo(batEnemy[i].getBatRow() + 4);
		batEnemy[i].setBulletBatColumnTo(batEnemy[i].getBatColumn() + 9);

		batEnemy[i].setBatFlagTo(1);
		batEnemy[i].setBatHealTo(2);
	}
}

void DrawBatEnemies(int loop)
{

	for (int p = 0; p < loop; p++)
	{
		batEnemy[p].DrawBatEnemy(batEnemy[p].getBatRow(), batEnemy[p].getBatColumn());

		GravityToGround(batEnemy[p].getBulletBatRow(), batEnemy[p].getBulletBatColumn(), p);
	}

}

void DrawBatBullets(int loop)
{
	for (int p = 0; p < loop; p++)
	{
		batEnemy[p].DrawBatBullet(batEnemy[p].getBulletBatRow(), batEnemy[p].getBulletBatColumn());

		GravityToGround(batEnemy[p].getBulletBatRow(), batEnemy[p].getBulletBatColumn(), p);
	}

}

////////////////////////////////////////////////////////////////

void PrintingMap()
{
	system("cls");

	int flag = 0;
	b = hero.getHeroColumn();


	if (b - 50 < 0)
	{
		b = 50;
		flag = 1;
	}

	if (flag == 1)
	{
		heroHealth.setHeroHealthBarColumnTo(180);
		flag = 0;
	}

	if (flag == 0)
		heroHealth.setHeroHealthBarColumnTo(b + 180 - 50);

	//SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
	for (r = 0; r < rows; r++)
	{
		for (c = b - 50; c < b + 250; c++)
		{
			// Hat
			if (r == hero.getHeroRow() && c >= hero.getHeroColumn() && c <= hero.getHeroColumn() + 11)
				SetConsoleTextAttribute(windowHandle, 4);

			// Face
			else if (r > hero.getHeroRow() && r < hero.getHeroRow() + 3 && c >= hero.getHeroColumn() && c <= hero.getHeroColumn() + 11)
				SetConsoleTextAttribute(windowHandle, 14);

			// Body
			else if (r > hero.getHeroRow() + 3 && r < hero.getHeroRow() + 6 && c >= hero.getHeroColumn() && c <= hero.getHeroColumn() + 11)
				SetConsoleTextAttribute(windowHandle, 1);

			// Legs
			else if (r > hero.getHeroRow() + 6 && r < hero.getHeroRow() + 8 && c >= hero.getHeroColumn() && c <= hero.getHeroColumn() + 11)
				SetConsoleTextAttribute(windowHandle, 6);

			// Ground
			else if (r > 43)
				SetConsoleTextAttribute(windowHandle, 14);

			// Sky
			else if (r < 6)
				SetConsoleTextAttribute(windowHandle, 3);
			else
				SetConsoleTextAttribute(windowHandle, 15);

			cout << map[r][c];
		}
	}

}

void Checkdamegedog(int i) {

	if (hero.getHeroColumn() + 11 >= dogEnemy[i].getDogColumn() && hero.getHeroColumn() <= dogEnemy[i].getDogColumn())
	{
		heroHealth.setRemainingHealTo(heroHealth.getRemainingHeal() - 2);
	}



}

void Gravity(int gravityRow, int gravityColumn)
{
	if (map[gravityRow + 9][gravityColumn] != ' ' || map[gravityRow + 9][gravityColumn + 12] != ' ')
		hero.setJumpLimitCounterTo(0);


	if (map[gravityRow + 9][gravityColumn] == ' ' && map[gravityRow + 9][gravityColumn + 12] == ' ')
	{
		gravityRow += 2;
		hero.setHeroRowTo(gravityRow);
	}
}


void GeneralDraw()
{
	hero.DrawHero();
	art.DrawSky();
	art.DrawGround();
	art.Drawladder();
	art.DrawTunnle();
	art.DrawSquare(art.squareRow, art.squareColumn);
	art.DrawSquare(5,1300);
	art.DrawLevelLadders();
	art.waslaConnect();
	art.DrawobstacleSeaLevelH();
	art.DrawobstacleSeaLevelV();
	aime.DrawEnemy();
	if (ctBack == 3)
		DrawMessage();
	laser.DrawLaser();

	art.DrawSingleElevator(firstElevatorRow, firstElevatorColumn);
	art.DrawSingleElevator(secondElevatorRow, secondElevatorColumn);
	art.DrawSingleElevator(thirdElevatorRow, thirdElevatorColumn);

	DrawBatBullets(batsNumber);
	DrawCoins(singleCoinI);
	DrawFrogEnemies(frogsNumber);
	DrawDogEnemies(dogsNumber);
	hero.DrawHero();
	DrawBatEnemies(batsNumber);
	hero.BulletDraw();

	DrawObstacles(5);
	heroHealth.DrawHealthBar(heroHealth.getRemainingHeal());
	hero.DrawHero();


}


void Menu(int i)
{
	switch (i)
	{
	case 0:
		cout <<


			"                                                                                         _____              _____               \n"
			"                                                                                        |   | |___ _ _ _   |   __|___ _____ ___ \n"
			"                                                                                        | | | | -_| | | |  |  |  | .'|     | -_|\n"
			"                                                                                        |_|___|___|_____|  |_____|__,|_|_|_|___|\n\n";



		break;

	case 1:
		cout <<



			"                                                                                       _____                  _____     _   _     \n"
			"                                                                                      |   __|___ _____ ___   |   __|_ _|_|_| |___ \n"
			"                                                                                      |  |  | .'|     | -_|  |  |  | | | | . | -_|\n"
			"                                                                                      |_____|__,|_|_|_|___|  |_____|___|_|___|___|\n\n";



		break;

	case 2:
		cout <<


			"                                                                                                  _____     _ _____ \n"
			"                                                                                                 |     |_ _|_|_   _|\n"
			"                                                                                                 |  |  | | | | | |  \n"
			"                                                                                                 |__  _|___|_| |_|  \n"
			"                                                                                                   |__|            \n\n";

		break;

	default:
		break;
	}


}

void Typing()
{
	system("cls");
	cout << "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
	string typing = "                                                     on 24 september ,2018 haru , An 11 year old boy first felt the super powers\n\n\n"
		"                                            he had but he wan not confindet at all that he can help someone or change something in the world\n\n\n"
		"                                                let's find out what haru can do to make history and to make his name engraved in history \n\n\n"
		"                                     'if you think you are too small to make a diffrence try going to bed with a mosquito in the room' said by Dalaia Lama \n\n\n";

	PlaySound(TEXT("sounds\\typing.wav"), NULL, SND_ASYNC);
	for (int i = 0; i < typing.length(); i++)
	{
		cout << typing[i];

		if (typing[i] != ' ' && typing[i + 1] != ' ')
			Sleep(60);
	}
	PlaySound(TEXT("sounds\\silence.wav"), NULL, SND_ASYNC);

}

void CurrentFiringMode()
{
	// Key T
	if (GetAsyncKeyState(0x54))
	{
		PlaySound(TEXT("sounds\\SwitchMenu.wav"), NULL, SND_ASYNC);
		hero.firingMode++;
		if (hero.firingMode == 4)
			hero.firingMode = 1;
	}


}



//void EricSpeech()
//{
//	string Eric =
//
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣦⡀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⣷⣄⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⠿⠿⣟⣤⣶⣤⣤⢠⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⢿⣫⣶⣿⣿⣿⣿⣿⣿⡿⣾⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠚⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣶⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⢿⣯⣿⣿⣽⣿⣿⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡏⠁⢸⣿⣿⣿⣿⣿⣟⣛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢇⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⡿⢿⣿⣿⣿⣟⣿⣿⣿⣿⣿⣿⣿⣿⢟⣰⣿⣿⣷⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣾⣿⣏⣷⣿⣿⣿⣿⣿⣿⣿⣿⠿⢛⣩⣶⣿⣿⣿⣿⢿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣏⣛⣿⣿⣿⣿⣿⣿⣿⣴⣿⣿⣿⠿⠛⣩⣤⣤⣄⠈⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣦⣌⠻⢿⣿⣛⣏⣿⣿⣿⣵⡿⠿⠛⣋⣥⣾⣾⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣷⣄⠛⣿⣿⠏⠝⢋⣴⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⡟⠛⣷⣤⣡⣤⡞⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⡿⠀⣸⣿⣿⣿⣿⣯⢸⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⢹⢉⣿⠐⢠⣿⣿⣿⣿⣿⣿⣘⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⡏⠈⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⡇⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⡇⠀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⡇⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⢀⣼⣿⣿⣿⣿⣿⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⣠⣿⡟⠛⠋⠉⠙⠟⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢂⣾⣿⣿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⣿⣿⣿⡿⠟⠛⠓⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡁⢾⠟⣩⣴⣶⣶⣬⡙⠻⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⣿⣿⣯⣴⠟⣥⠇⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡤⠈⠙⠛⠻⠿⢿⣿⣷⣌⠙⢿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⢰⡿⠻⢛⣠⣾⠏⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⣋⣀⣴⣾⣦⣀⠈⡑⢶⣤⣌⣙⠓⢸⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⢸⣧⣴⣾⣿⠃⣠⣶⣤⣉⣛⠛⠻⣿⣿⣿⡿⠿⠟⣉⠻⣿⡏⢰⣾⣿⣿⣿⣿⣿⣿⣶⣼⣦⡙⢿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⣿⣿⣿⣿⠃⣴⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⣿⣧⢸⠁⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡘⣿⣿⣿⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠸⣿⣿⣿⠁⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⣸⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠙⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢿⡇⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣾⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠻⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠃⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣀⠉⠻⢿⡿⡿⠿⠟⢛⣉⣉⣩⣤⣄⣄⠀⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣴⣶⣶⣾⣿⠿⠿⠛⡉⢡⣴⣾⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⠛⠉⠀⠰⠿⠇⠀⠘⠛⠛⣿⣿⣄⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⣀⡘⠛⠒⠲⠤⠤⢬⣍⡉⠉⠉⠉⠉⠉⣉⣉⣉⣉⣉⣉⣁⣤⣴⣤⣶⣶⣶⣦⠸⣿⣷⣶⣾⣯⢿⣿⣿⣿⣷⣶⣤⣄⣀⣀⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣶⣶⣷⣶⣶⣾⣿⡇⢯⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠸⣿⣿⣿⣿⣧⢿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⢀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣯⣝⠻⢿⣿⣿⣧⠘⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣽⣿⣿⣿⣿⡆⣿⣿⣿⣿⣿⣿⣷⣶⣶⣿⡟⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣧⣍⣙⠛⠿⢶⣬⣙⠛⠄⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣭⣭⣤⡤⣹⣿⣿⣿⣿⣿⣿⠛⠛⠃⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣧⣤⣄⣉⠙⠦⠀⢈⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⢿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡆⠈⣙⠲⢄⡙⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡘⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀\n"
//		"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡘⢷⣦⣌⡑⠌⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡜⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀\n";
//
//	PlaySound(TEXT("sounds\\ErwinSpeech.wav"), NULL, SND_ASYNC);
//
//	cout << "\n\n\n\n\n";
//	cout << EricSpeech;
//	
//	for (i = 0; i < 100; i++)
//		Sleep(100);
//}

int GetLevel()
{
	//EricSpeech();

	while (true)
	{
		system("cls");

		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 6);
		cout << "\n\n\n\n\n\n\n"


			"                                                                      .----------------.  .----------------.  .-----------------. .----------------. \n"
			"	                                                             | .--------------. || .--------------. || .--------------. || .--------------. |\n"
			"                                                                     | | ____    ____ | || |  _________   | || | ____  _____  | || | _____  _____ | |\n"
			"	                                                             | ||_   \\  /   _|| || | |_   ___  |  | || ||_   \\|_   _| | || ||_   _||_   _|| |\n"
			"	                                                             | |  |   \\/   |  | || |   | |_  \\_|  | || |  |   \\ | |   | || |  | |    | |  | |\n"
			"	                                                             | |  | |\\  /| |  | || |   |  _|  _   | || |  | |\\ \\| |   | || |  | '    ' |  | |\n"
			"	                                                             | | _| |_\\/_| |_ | || |  _| |___/ |  | || | _| |_\\   |_  | || |   \\ `--' /   | |\n"
			"	                                                             | ||_____||_____|| || | |_________|  | || ||_____|\\____| | || |    `.__.'    | |\n"
			"	                                                             | |              | || |              | || |              | || |              | |\n"
			"	                                                             | '--------------' || '--------------' || '--------------' || '--------------' |\n"
			"                                                                      '----------------'  '----------------'  '----------------'  '----------------' \n\n\n\n";

		for (int i = 0; i < 3; i++)
		{
			if (i == LevelPointer)
			{
				if (i != 2)
					SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 3);
				else
					SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 4);

				Menu(i);
			}
			else
			{
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
				Menu(i);
			}
		}

		while (true)
		{
			if (GetAsyncKeyState(VK_UP))
			{
				LevelPointer--;
				PlaySound(TEXT("sounds\\SwitchMenu.wav"), NULL, SND_ASYNC);

				if (LevelPointer == -1)
				{
					LevelPointer = 2;
				}
				break;
			}
			else if (GetAsyncKeyState(VK_DOWN))
			{
				LevelPointer++;
				PlaySound(TEXT("sounds\\SwitchMenu.wav"), NULL, SND_ASYNC);

				if (LevelPointer == 3)
				{
					LevelPointer = 0;
				}
				break;
			}
			else if (GetAsyncKeyState(VK_RETURN))
			{
				PlaySound(TEXT("sounds\\EnterKey.wav"), NULL, SND_ASYNC);

				switch (LevelPointer)
				{
				case 0:
					return 1;

				case 1:
					return 2;

				case 2:
					return 3;
				}
			}
		}
		Sleep(160);
	}
}

void يُتبع()
{
	system("cls");
	cout << "\n\n\n\n\n\n\n\n";
	cout <<




		"                                                                                                           @@@@@@@@                         \n"
		"                                                                                                           @@@@@@@@                          \n"
		"                                                                                                           @@@@@@@@                          \n"
		"                                                                                                                                             \n"
		"                                                                                                           @@@@@@@@                          \n"
		"                                                                                                           @@@@@@@@                          \n"
		"                                                                                                           @@@@@@@@                          \n"
		"                                                             @@@@@@@@@@@                                                                     \n"
		"                                                          @@@@@@@@@@@@@@@@@             @@@@@@@            @@@@@@@@           @@@@@@@@       \n"
		"                                                        @@@@@@@@@@@@@@@@@@@@            @@@@@@@            @@@@@@@@           @@@@@@@@       \n"
		"                                                       @@@@@@@        @@@@@@@           @@@@@@@            @@@@@@@@           @@@@@@@@       \n"
		"                                                       @@@@@@@        @@@@@@            @@@@@@@            @@@@@@@@           @@@@@@@@       \n"
		"                                                       @@@@@@@                          @@@@@@@            @@@@@@@@           @@@@@@@@       \n"
		"                                                       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       \n"
		"                                                         #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       \n"
		"                                                       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        \n"
		"                                                     .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          \n"
		"                                                     %@@@@@@%                                                                                \n"
		"                                                     (@@@@@@@@%##(((((((((*.           @@@@@                            .#@@#    /@@%,       \n"
		"                                                      &@@@@@@@@@@@@@@@@@@@@@@&        @@@@@@@                          /@@@@@@, @@@@@@%      \n"
		"                                                       ,@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@(                          %@@@@%  *@@@@@.      \n"
		"                                                           ,/%@@@@@@@@@@@@%/.           .,,                                                  \n\n\n\n\n\n\n\n\n\n\n\n\n";
}

void Movedogs() {
	for (int i = 0; i < dogsNumber; i++)
	{
		dogEnemy[i].MoveDog();
		Checkdamegedog(i);
	}
}

void SetUp()
{
	srand(time(0));
	LevelPointer = 0;
	modeSky = 1;

	GameOver = false;
	PlayerDead = false;
	flagLast = 1;
	setBatEnemiesPositions();
	setFrogEnemiesPositions();
	setObstaclesPositions();
	setDogEnemiesPositions();

	setCoinsPositions(singleCoinI, 10, 28, 300);
	setCoinsPositions(singleCoinI, 17, 41, 720);
	setCoinsPositions(singleCoinI, 17, 29, 720);


	hero.setHeroRowTo(27);
	hero.setHeroColumnTo(1);
	laser.setLaser();

	heroHealth.setHeroLifesTo(3);
	heroHealth.setHeroHealthBarRowTo(8);
	heroHealth.setHeroHealthBarColumnTo(165);
	heroHealth.setRemainingHealTo(20);

	backToMenu = false;
}

void SetUpGamePlay()
{
	srand(time(0));
	LevelPointer = 0;
	modeSky = 1;
	GameOver = false;
	PlayerDead = false;
	setBatEnemiesPositions();
	setFrogEnemiesPositions();
	setDogEnemiesPositions();
	setObstaclesPositions();
	flagLast = 1;

	setCoinsPositions(singleCoinI, 10, 28, 300);
	setCoinsPositions(singleCoinI, 17, 41, 720);
	setCoinsPositions(singleCoinI, 17, 29, 720);

	hero.setHeroRowTo(10);
	hero.setHeroColumnTo(1201);

	laser.setLaser();

	//heroHealth.setHeroLifesTo(3);
	heroHealth.setHeroHealthBarRowTo(8);
	heroHealth.setHeroHealthBarColumnTo(165);
	heroHealth.setRemainingHealTo(20);


}

void هيا_بنا_نلعب()
{

	
	int herolifes = 3;
	while (!GameOver)
	{
		SetUp();

		switch (GetLevel())
		{

		case 1:

			//Typing();
			while (heroHealth.getHeroLifes())
			{
				SetUpGamePlay();

				while (!PlayerDead)
				{

					CurrentFiringMode();
					ClearMap();
					GeneralDraw();
					PrintingMap();
					//cout << hero.firingMode << endl;
					hero.moveElevator(firstElevatorRow, firstElevatorColumn, 1);
					hero.moveElevator(secondElevatorRow, secondElevatorColumn, 2);
					hero.moveElevator(thirdElevatorRow, thirdElevatorColumn, 3);
					hero.HeroActions();
					MoveLastEnemy();
					CheckLaserWithBat();
					CheckLaserWithFrog();
					CheckLaserWithDogs();
					Movedogs();
					//Coin[0].drawCoin(30, 300);
					cttlaser++;
					if (cttlaser%15==0)
					{
						drawlaser(map,rrlaser,cclaser);
					}


					laser.setLaserPositions(hero.getHeroRow(), hero.getHeroColumn());

					Gravity(hero.getHeroRow(), hero.getHeroColumn());
					//hero.UpdateBulletPosition();

					if (GetAsyncKeyState(VK_BACK))
					{
						PlaySound(TEXT("sounds\\BackButton.wav"), NULL, SND_ASYNC);
						backToMenu = true;
					}

					if (backToMenu == true)
						break;

					// Key M
					if (GetAsyncKeyState(0x4D))
					{
						hero.setHeroRowTo(8);
					}

					if (GetAsyncKeyState(0x60))
					{

						PlaySound(TEXT("sounds\\mashy.wav"), NULL, SND_ASYNC);
					}



					if (heroHealth.getRemainingHeal() <= 0)
					{
						heroHealth.setHeroLifesTo(heroHealth.getHeroLifes() - 1);


						if (heroHealth.getHeroLifes())
							PlaySound(TEXT("sounds\die.wav"), NULL, SND_ASYNC);

						else
							PlaySound(TEXT("sounds\gameover.wav"), NULL, SND_ASYNC);
						PlayerDead = true;

						PlayerDead = true;

					}
				}

				if (backToMenu == true)
				{

					break;
				}
			}

			break;

		case 2:
		
			break;

		case 3:
			يُتبع();
			GameOver = true;
			break;

		}
	}
}

int main()
{
	هيا_بنا_نلعب();
}
